/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package configuracion;

import historicos.F_Historico_Visitantes;
import auxiliares.ConexionBaseDatos;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * Clase que permite modificar una tipo de entrada existente.
 * Se accede a ella al seleccionar un tipo de entrada de la clase F_ConfiguracionEntradas y pulsar el botón 'Modificar'.
 * @author Daniel Marcos Muñoz
 */
public class F_Config_ModificarEntrada extends javax.swing.JFrame {

    String concepto = "";
    ArrayList<Float> listaPrecios;

    /**
     * Creates new form F_Config_ModificarEntrada
     */
    public F_Config_ModificarEntrada() {
        initComponents();
        establecerColor();
        setTitle("Centro de Investigación El Fuerte");
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelFondo = new javax.swing.JPanel();
        labelTitulo = new javax.swing.JLabel();
        lblConcepto = new javax.swing.JLabel();
        lblPrecio = new javax.swing.JLabel();
        campoPrecio = new javax.swing.JSpinner();
        btnModificar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        campoConcepto = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        labelTitulo.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        labelTitulo.setText("Modificar Entrada");

        lblConcepto.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblConcepto.setText("Concepto:");

        lblPrecio.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblPrecio.setText("Precio:");

        campoPrecio.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        campoPrecio.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), Float.valueOf(15.0f), Float.valueOf(1.0f)));

        btnModificar.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnLimpiar.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        campoConcepto.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        campoConcepto.setText("-");

        javax.swing.GroupLayout panelFondoLayout = new javax.swing.GroupLayout(panelFondo);
        panelFondo.setLayout(panelFondoLayout);
        panelFondoLayout.setHorizontalGroup(
            panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelFondoLayout.createSequentialGroup()
                        .addComponent(lblConcepto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(campoConcepto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelFondoLayout.createSequentialGroup()
                        .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelTitulo)
                            .addGroup(panelFondoLayout.createSequentialGroup()
                                .addComponent(lblPrecio)
                                .addGap(40, 40, 40)
                                .addComponent(campoPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelFondoLayout.createSequentialGroup()
                                .addComponent(btnModificar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 140, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelFondoLayout.setVerticalGroup(
            panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblConcepto)
                    .addComponent(campoConcepto))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrecio)
                    .addComponent(campoPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnModificar)
                    .addComponent(btnLimpiar))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        limpiarFormulario();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:
        try {
            registrarDatos();
        } catch (SQLException ex) {
            Logger.getLogger(F_Config_ModificarEntrada.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "No se ha pidodo registrar", "Error", 2);
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(F_Config_ModificarEntrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(F_Config_ModificarEntrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(F_Config_ModificarEntrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(F_Config_ModificarEntrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new F_Config_ModificarEntrada().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton btnLimpiar;
    private static javax.swing.JButton btnModificar;
    private static javax.swing.JLabel campoConcepto;
    private javax.swing.JSpinner campoPrecio;
    private static javax.swing.JLabel labelTitulo;
    private static javax.swing.JLabel lblConcepto;
    private static javax.swing.JLabel lblPrecio;
    private static javax.swing.JPanel panelFondo;
    // End of variables declaration//GEN-END:variables

    /**
     * Método que actualiza los valores modificados de la entrada seleccionada en la Base de Datos.
     * @throws SQLException Puede lanzar excepciones de conexión con la Base de Datos
     */
    public void registrarDatos() throws SQLException {
        float precio = (float) campoPrecio.getValue();

        int opcion = JOptionPane.showConfirmDialog(rootPane, "¿Está seguro de querer modificar el registro seleccionado?", "Aviso", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (opcion == JOptionPane.YES_OPTION) {
            ConexionBaseDatos.ConexionBaseDatos();
            Connection conexion = ConexionBaseDatos.getConnection();
            String datosActualizacion = "UPDATE ENTRADA SET PRECIO = " + precio
                    + " WHERE CONCEPTO = '" + concepto + "'";
            System.out.println(datosActualizacion);
            PreparedStatement sentencia;
            try {
                sentencia = conexion.prepareStatement(datosActualizacion);
                sentencia.executeUpdate();
                JOptionPane.showMessageDialog(rootPane, "Registro modificado con éxito", "Información", 3);
                F_ConfiguracionEntradas.rellenarTabla();
            } catch (SQLException ex) {
                Logger.getLogger(F_Historico_Visitantes.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Los datos introducidos no son válidos.\nEl registro NO ha sido modificado.", "Error", 2);
            }
            ConexionBaseDatos.desconexionBaseDatos();
            dispose();
        }

    }

    /**
     * Método que limpia el formulario de modificación de entradas, reseteando los valores actuales
     */
    public void limpiarFormulario() {
        campoPrecio.setValue(0);
    }

 /**
  * Método que establece el nombre de la entrada al que se le introduzca por parámetro.
  * @param concepto String con el nombre de la entrada
  */
    public void setConcepto(String concepto) {
        this.concepto = concepto;
    }

    /**
     * Método que recupera el valor del tipo de entrada que se está modificando.
     * @return Devuelve un String con el nombre del tipo de entrada.
     */
    public String getConcepto() {
        return concepto;
    }

/**
 * Método que establece el texto de la etiqueta con el nombre de la entrada que se está modificando.
 * @param entrada String con el nombre de la entrada, para pasarle el valor a la etiqueta que la mostrará.
 */
    public void establecerEntrada(String entrada) {
        campoConcepto.setText(entrada);
    }

    /**
     * Método que consulta en la Base de Datos el precio de la entrada que se pretende modificar, para ofrecerlo como valor por defecto en el formulario de modificación. El usuario podrá cambiarlo mediante uso del Spinner que lo contiene.
     */
    public void rellenarPrecio() {
        try {
            listaPrecios = new ArrayList<>();
            ConexionBaseDatos.ConexionBaseDatos();
            Connection conexion = ConexionBaseDatos.getConnection();
            Statement sentencia = conexion.createStatement();
            String sql;
            sql = "SELECT PRECIO FROM ENTRADA WHERE CONCEPTO = '" + concepto + "'";
            ResultSet resul = sentencia.executeQuery(sql);
            //Recorremos el resulSet introducinedo todo en nuestro Array del comboBox
            while (resul.next()) {
                listaPrecios.add(resul.getFloat(1));
                System.out.println("Entradas: " + resul.getString(1));
                campoPrecio.setValue(resul.getFloat(1));
            }
            resul.close();
            sentencia.close();
            //conexion.close(); lo cerramos a continuación desde la clase
            ConexionBaseDatos.desconexionBaseDatos();
        } catch (SQLException ex) {
            Logger.getLogger(F_Config_ModificarEntrada.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Error al cargar la lista de precios al modificar entradas");
        }
    }

    /**
     * Este método gestiona el color de sus componentes en función de las prefedencias del usuario.
     */
    public static void establecerColor() {
        ColorInterfaz.dimeColores();
        Color colorFondo = ColorInterfaz.dimeColores()[0];
        Color colorBotones = ColorInterfaz.dimeColores()[1];
        Color colorTexto = ColorInterfaz.dimeColores()[2];

        //Paneles de fondo
        panelFondo.setBackground(colorFondo);

        //Botones
        btnModificar.setBackground(colorBotones);
        btnLimpiar.setBackground(colorBotones);

        //Textos
        labelTitulo.setForeground(colorTexto);
        campoConcepto.setForeground(colorTexto);
        lblConcepto.setForeground(colorTexto);
        lblPrecio.setForeground(colorTexto);
        btnModificar.setForeground(colorTexto);
        btnLimpiar.setForeground(colorTexto);
    }
}
