/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package historicos;

import modificacionHistoricos.F_Modificar_Reservas;
import registros.Registro_Reserva;
import auxiliares.ConexionBaseDatos;
import auxiliares.Fecha;
import configuracion.ColorInterfaz;
import java.awt.Color;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author daniu
 */
public class F_Historico_Reservas extends javax.swing.JFrame {

    static ArrayList<Registro_Reserva> miLista;
    private static F_Modificar_Reservas modificarReservas;

    /**
     * Creates new form F_Historico_Reservas
     */
    public F_Historico_Reservas() {
        initComponents();
        establecerColor();
        setTitle("Centro de Investigación El Fuerte");
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelFondo = new javax.swing.JPanel();
        labelTitulo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_Historico_Reservas = new javax.swing.JTable();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        labelTitulo.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        labelTitulo.setText("Histórico de Reservas");

        tabla_Historico_Reservas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "NUM_REF", "FECHA_TRAMITACIÓN", "FECHA_RESERVA", "ENTIDAD", "ACTIVIDAD", "CANTIDAD", "CONTACTO", "CARGO", "TLF", "EMAIL", "OBSERVACIONES"
            }
        ));
        tabla_Historico_Reservas.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabla_Historico_Reservas);

        btnModificar.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelFondoLayout = new javax.swing.GroupLayout(panelFondo);
        panelFondo.setLayout(panelFondoLayout);
        panelFondoLayout.setHorizontalGroup(
            panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1145, Short.MAX_VALUE)
                    .addGroup(panelFondoLayout.createSequentialGroup()
                        .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelTitulo)
                            .addGroup(panelFondoLayout.createSequentialGroup()
                                .addComponent(btnModificar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelFondoLayout.setVerticalGroup(
            panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnModificar)
                    .addComponent(btnEliminar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // NECESITO SACAR LOS NÚMEROS DE REGISTRO DE TODAS LAS FILAS SELECCIONADAS, PARA LUEGO HACER UN DELETE WHERE NUMERO DE REGISTRO COINCIDA CON ELLOS
        int cantidadFilasSeleccionadas = tabla_Historico_Reservas.getSelectedRowCount();
        if (cantidadFilasSeleccionadas > 0) {
            ArrayList<String> listaEliminar = new ArrayList<>();
            System.out.println("Cantidad filas seleccionadas: " + cantidadFilasSeleccionadas);
            String indice = "0";
            int opcion = JOptionPane.showConfirmDialog(rootPane, "Se van a eliminar " + cantidadFilasSeleccionadas + " registros.\n¿Desea continuar?", "Aviso", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (opcion == JOptionPane.YES_OPTION) {
                for (int i = 0; i < cantidadFilasSeleccionadas; i++) {
                    indice = (String) tabla_Historico_Reservas.getValueAt(tabla_Historico_Reservas.getSelectedRow() + i, 0);
                    listaEliminar.add(indice);
                }
                for (String element : listaEliminar) {
                    eliminarRegistros(Integer.parseInt(element));
                }
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Debe seleccionar al menos una fila para eliminarla del registro.", "Información", 1);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        int cantCamposSeleccionados = tabla_Historico_Reservas.getSelectedRowCount();
        if (cantCamposSeleccionados == 1) {
            if (modificarReservas == null) {
                modificarReservas = new F_Modificar_Reservas();
            }
            modificarReservas.setLocationRelativeTo(this);
            modificarReservas.setVisible(true);
            int numRefModificar = Integer.valueOf((String) tabla_Historico_Reservas.getValueAt(tabla_Historico_Reservas.getSelectedRow(), 0));
            modificarReservas.cargarDatos(numRefModificar);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Debe seleccionar una ÚNICA fila para poder modificarla.", "Información", 1);
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(F_Historico_Reservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(F_Historico_Reservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(F_Historico_Reservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(F_Historico_Reservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new F_Historico_Reservas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton btnEliminar;
    private static javax.swing.JButton btnModificar;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JLabel labelTitulo;
    private static javax.swing.JPanel panelFondo;
    private static javax.swing.JTable tabla_Historico_Reservas;
    // End of variables declaration//GEN-END:variables

    public static void extraerDatosDeBase() {
        miLista = new ArrayList<>();
        ConexionBaseDatos.ConexionBaseDatos();
        Connection conexion = ConexionBaseDatos.getConnection();
        Statement sentencia;
        try {
            sentencia = conexion.createStatement();
            String sql;
            sql = "SELECT * FROM REGISTRO_RESERVAS ORDER BY NUM_REF DESC";
            ResultSet resul = sentencia.executeQuery(sql);
            while (resul.next()) {
                Registro_Reserva registro = new Registro_Reserva(resul.getInt(1), Fecha.formateaFecha(resul.getDate(2)), Fecha.formateaFecha(resul.getDate(3)), resul.getString(4), resul.getString(5), resul.getInt(6), resul.getString(7), resul.getString(8), resul.getString(9), resul.getString(10), resul.getString(11));
                miLista.add(registro);
            }
        } catch (SQLException ex) {
            Logger.getLogger(F_Historico_Reservas.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Error al tratar de conectar con la base de datos desde el Histórico de Reservas");
        }

        ConexionBaseDatos.desconexionBaseDatos();
    }

    public static void rellenarTabla() {
        extraerDatosDeBase();
        String matrizDatos[][] = new String[miLista.size()][11];//el segundo número es el número de campos
        for (int i = 0; i < miLista.size(); i++) {
            matrizDatos[i][0] = Integer.toString(miLista.get(i).getNum_ref());
            matrizDatos[i][1] = miLista.get(i).getFecha_tramitacion();
            matrizDatos[i][2] = miLista.get(i).getFecha_reserva();
            matrizDatos[i][3] = miLista.get(i).getEntidad();
            matrizDatos[i][4] = miLista.get(i).getActividad();
            matrizDatos[i][5] = Integer.toString(miLista.get(i).getCantidad());
            matrizDatos[i][6] = miLista.get(i).getContacto();
            matrizDatos[i][7] = miLista.get(i).getCargo();
            matrizDatos[i][8] = miLista.get(i).getTlf();
            matrizDatos[i][9] = miLista.get(i).getEmail();
            matrizDatos[i][10] = miLista.get(i).getObservaciones();
        }

        tabla_Historico_Reservas.setModel(new javax.swing.table.DefaultTableModel(
                matrizDatos,
                new String[]{
                    "NUM_REG", "FECHA TRAMITACIÓN", "FECHA RESERVADA", "ENTIDAD", "ACTIVIDAD", "CANTIDAD", "CONTACTO", "CARGO", "TLF", "EMAIL", "OBSERVACIONES"
                }
        ));
    }

    public void eliminarRegistros(int indice) {
        ConexionBaseDatos.ConexionBaseDatos();
        Connection conexion = ConexionBaseDatos.getConnection();
        Statement sentencia;
        try {
            sentencia = conexion.createStatement();
            String sql;
            sql = "DELETE FROM REGISTRO_RESERVAS WHERE NUM_REF =" + indice;
            ResultSet resul = sentencia.executeQuery(sql);
            System.out.println("Se ha eliminado el registro " + indice);
        } catch (SQLException ex) {
            Logger.getLogger(F_Historico_Reservas.class.getName()).log(Level.SEVERE, null, ex);
        }

        rellenarTabla();
    }

    public static void establecerColor() {
        ColorInterfaz.dimeColores();
        Color colorFondo = ColorInterfaz.dimeColores()[0];
        Color colorBotones = ColorInterfaz.dimeColores()[1];
        Color colorTexto = ColorInterfaz.dimeColores()[2];

        //Paneles de fondo
        panelFondo.setBackground(colorFondo);

        //Botones
        btnModificar.setBackground(colorBotones);
        btnEliminar.setBackground(colorBotones);

        //Textos
        labelTitulo.setForeground(colorTexto);
        btnModificar.setForeground(colorTexto);
        btnEliminar.setForeground(colorTexto);
        if (modificarReservas != null) {
            modificarReservas.establecerColor();
        }
    }
}
