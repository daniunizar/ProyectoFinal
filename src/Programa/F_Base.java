/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Programa;

import configuracion.F_ConfiguracionEntradas;
import formularios.F_Informacion;
import formularios.F_Reservas;
import formularios.F_Merchandising;
import formularios.F_Facturacion;
import formularios.F_VentaEntradas;
import historicos.F_Historico_Merchandising;
import historicos.F_Historico_Visitantes;
import historicos.F_Historico_Reservas;
import historicos.F_Historico_Informacion;
import historicos.F_Historico_Entradas;
import auxiliares.ConexionBaseDatos;
import auxiliares.Fecha;
import configuracion.ColorInterfaz;
import configuracion.F_ConfiguracionMerchandising;
import formularios.F_Colores;
import formularios.F_PaletaColores;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import registros.Registro_Entradas;

/**
 * La clase F_Base es la clase principal de la apliación. Consistente en un
 * JFrame, posee un panel con el formulario de registro de visitantes, otro con
 * botones que abren el resto de formularios y un menú superior horizontal que
 * permite acceder al resto de funcionalidades.
 *
 * @author Daniel Marcos Muñoz
 */
public class F_Base extends javax.swing.JFrame {

    String usuario = "ad04";
    String clave = "ad04";
    ArrayList<String> listaProcedencias;
    String urlV = "jdbc:oracle:thin:@192.168.0.18:1521:XE";

    F_Historico_Visitantes historicoVisitantes;
    F_Historico_Informacion historicoInformacion;
    F_Historico_Entradas historicoEntradas;
    F_Historico_Reservas historicoReservas;
    F_Historico_Merchandising historicoMerchandising;

    F_Informacion informacion;
    F_VentaEntradas ventaEntradas;
    F_Reservas reservas;
    F_Merchandising merchandising;

    F_Facturacion facturacion;
    F_PaletaColores formularioColores;

    F_ConfiguracionEntradas configuracionEntradas;
    F_ConfiguracionMerchandising configuracionMerchandising;

    /**
     * Creates new form F_Base
     */
    public F_Base() {
        try {
            initComponents();
            this.setLocationRelativeTo(null);
            setTitle("Centro de Investigación El Fuerte");
            setResizable(false);
            cargarColoresInicio();
            cargarComboBoxProcedencias();
        } catch (Exception e) {
            System.out.println("El sistema no pudo cargar la ventana principal, y se ha cerrado automáticamente para evitar que quede en segundo plano.");
            JOptionPane.showMessageDialog(null, "Debido a un error al conectar con la Base de Datos la ventana principal no se ha podido cargar.\nLa aplicación se cerrará para evitar que quede abierta en segundo plano");
            System.exit(1);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        P_RegistroVisitantes = new javax.swing.JPanel();
        P_Visitantes = new javax.swing.JPanel();
        labelTitulo = new javax.swing.JLabel();
        lblCantidad = new javax.swing.JLabel();
        lblProcedencia = new javax.swing.JLabel();
        Cmb_RV_Procedencia = new javax.swing.JComboBox<>();
        Chb_RV_Internacional = new javax.swing.JCheckBox();
        P_RV_SexoYEdad = new javax.swing.JPanel();
        lblGuion = new javax.swing.JLabel();
        lblMenores = new javax.swing.JLabel();
        lblJovenes = new javax.swing.JLabel();
        lblAdultos = new javax.swing.JLabel();
        lblMayores = new javax.swing.JLabel();
        lblMujeres = new javax.swing.JLabel();
        Spn_RV_mn = new javax.swing.JSpinner();
        Spn_RV_mj = new javax.swing.JSpinner();
        Spn_RV_ma = new javax.swing.JSpinner();
        Spn_RV_mm = new javax.swing.JSpinner();
        lblHombres = new javax.swing.JLabel();
        Spn_RV_hn = new javax.swing.JSpinner();
        Spn_RV_hj = new javax.swing.JSpinner();
        Spn_RV_ha = new javax.swing.JSpinner();
        Spn_RV_hm = new javax.swing.JSpinner();
        Spn_RV_Cantidad = new javax.swing.JSpinner();
        Btn_RV_Registrar = new javax.swing.JButton();
        Btn_RV_Limpiar = new javax.swing.JButton();
        P_Botones = new javax.swing.JPanel();
        Btn_Mostrar_Informacion = new javax.swing.JButton();
        Btn_Mostrar_VentaEntradas = new javax.swing.JButton();
        Btn_Mostrar_Reservas = new javax.swing.JButton();
        Btn_Mostrar_Merchandising = new javax.swing.JButton();
        menuBar_Menu = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menu_Nueva = new javax.swing.JMenu();
        meu_solInfo = new javax.swing.JMenuItem();
        menu_VentaEntradas = new javax.swing.JMenuItem();
        menuReserva = new javax.swing.JMenuItem();
        menu_ventaMerchan = new javax.swing.JMenuItem();
        menuSalir = new javax.swing.JMenuItem();
        menu_Registros = new javax.swing.JMenu();
        menuH_Visitantes = new javax.swing.JMenuItem();
        menuH_Info = new javax.swing.JMenuItem();
        menuH_Entradas = new javax.swing.JMenuItem();
        menuH_Reservas = new javax.swing.JMenuItem();
        menuH_Merchandising = new javax.swing.JMenuItem();
        menu_Facturación = new javax.swing.JMenu();
        menu_facturacion = new javax.swing.JMenuItem();
        menu_Configuracion = new javax.swing.JMenu();
        menu_configTipoEntrada = new javax.swing.JMenuItem();
        menu_confirMerchan = new javax.swing.JMenuItem();
        menu_Color = new javax.swing.JMenu();
        colorOriginal = new javax.swing.JMenuItem();
        coloresCalidos = new javax.swing.JMenuItem();
        coloresNeutros = new javax.swing.JMenuItem();
        coloresFrios = new javax.swing.JMenuItem();
        coloresPersonalizados = new javax.swing.JMenuItem();
        personalizarColor = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelTitulo.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        labelTitulo.setText("Registro de Visitantes");

        lblCantidad.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblCantidad.setText("Cantidad");

        lblProcedencia.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblProcedencia.setText("Procedencia");

        Cmb_RV_Procedencia.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Cmb_RV_Procedencia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        Chb_RV_Internacional.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Chb_RV_Internacional.setText("Internacional");
        Chb_RV_Internacional.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Chb_RV_InternacionalMouseClicked(evt);
            }
        });

        P_RV_SexoYEdad.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Rangos de sexo y edad", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 24))); // NOI18N
        P_RV_SexoYEdad.setLayout(new java.awt.GridLayout(3, 5));

        lblGuion.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblGuion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblGuion.setText("-");
        P_RV_SexoYEdad.add(lblGuion);

        lblMenores.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblMenores.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMenores.setText("<18");
        P_RV_SexoYEdad.add(lblMenores);

        lblJovenes.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblJovenes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblJovenes.setText("18-35");
        P_RV_SexoYEdad.add(lblJovenes);

        lblAdultos.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblAdultos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAdultos.setText("36-65");
        P_RV_SexoYEdad.add(lblAdultos);

        lblMayores.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblMayores.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMayores.setText(">65");
        P_RV_SexoYEdad.add(lblMayores);

        lblMujeres.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblMujeres.setText("Mujeres");
        P_RV_SexoYEdad.add(lblMujeres);

        Spn_RV_mn.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Spn_RV_mn.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));
        P_RV_SexoYEdad.add(Spn_RV_mn);

        Spn_RV_mj.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Spn_RV_mj.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));
        P_RV_SexoYEdad.add(Spn_RV_mj);

        Spn_RV_ma.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Spn_RV_ma.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));
        P_RV_SexoYEdad.add(Spn_RV_ma);

        Spn_RV_mm.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Spn_RV_mm.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));
        P_RV_SexoYEdad.add(Spn_RV_mm);

        lblHombres.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblHombres.setText("Hombres");
        P_RV_SexoYEdad.add(lblHombres);

        Spn_RV_hn.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Spn_RV_hn.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));
        P_RV_SexoYEdad.add(Spn_RV_hn);

        Spn_RV_hj.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Spn_RV_hj.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));
        P_RV_SexoYEdad.add(Spn_RV_hj);

        Spn_RV_ha.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Spn_RV_ha.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));
        P_RV_SexoYEdad.add(Spn_RV_ha);

        Spn_RV_hm.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Spn_RV_hm.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));
        P_RV_SexoYEdad.add(Spn_RV_hm);

        Spn_RV_Cantidad.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Spn_RV_Cantidad.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));

        Btn_RV_Registrar.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        Btn_RV_Registrar.setText("Registrar");
        Btn_RV_Registrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_RV_RegistrarActionPerformed(evt);
            }
        });

        Btn_RV_Limpiar.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        Btn_RV_Limpiar.setText("Limpiar");
        Btn_RV_Limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_RV_LimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout P_VisitantesLayout = new javax.swing.GroupLayout(P_Visitantes);
        P_Visitantes.setLayout(P_VisitantesLayout);
        P_VisitantesLayout.setHorizontalGroup(
            P_VisitantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_VisitantesLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(P_VisitantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(P_VisitantesLayout.createSequentialGroup()
                        .addGroup(P_VisitantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(P_RV_SexoYEdad, javax.swing.GroupLayout.DEFAULT_SIZE, 725, Short.MAX_VALUE)
                            .addGroup(P_VisitantesLayout.createSequentialGroup()
                                .addGroup(P_VisitantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblCantidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Spn_RV_Cantidad))
                                .addGap(64, 64, 64)
                                .addGroup(P_VisitantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblProcedencia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Cmb_RV_Procedencia, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Chb_RV_Internacional))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, P_VisitantesLayout.createSequentialGroup()
                                .addComponent(labelTitulo)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(46, 46, 46))
                    .addGroup(P_VisitantesLayout.createSequentialGroup()
                        .addComponent(Btn_RV_Registrar)
                        .addGap(18, 18, 18)
                        .addComponent(Btn_RV_Limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        P_VisitantesLayout.setVerticalGroup(
            P_VisitantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_VisitantesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitulo)
                .addGap(18, 18, 18)
                .addGroup(P_VisitantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCantidad)
                    .addComponent(lblProcedencia))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(P_VisitantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Cmb_RV_Procedencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Chb_RV_Internacional)
                    .addComponent(Spn_RV_Cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(P_RV_SexoYEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(P_VisitantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Btn_RV_Registrar)
                    .addComponent(Btn_RV_Limpiar))
                .addGap(34, 34, 34))
        );

        P_Botones.setLayout(new java.awt.GridLayout(4, 1));

        Btn_Mostrar_Informacion.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        Btn_Mostrar_Informacion.setText("Información");
        Btn_Mostrar_Informacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_Mostrar_InformacionActionPerformed(evt);
            }
        });
        P_Botones.add(Btn_Mostrar_Informacion);

        Btn_Mostrar_VentaEntradas.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        Btn_Mostrar_VentaEntradas.setText("Venta de Entradas");
        Btn_Mostrar_VentaEntradas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_Mostrar_VentaEntradasActionPerformed(evt);
            }
        });
        P_Botones.add(Btn_Mostrar_VentaEntradas);

        Btn_Mostrar_Reservas.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        Btn_Mostrar_Reservas.setText("Reservas");
        Btn_Mostrar_Reservas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_Mostrar_ReservasActionPerformed(evt);
            }
        });
        P_Botones.add(Btn_Mostrar_Reservas);

        Btn_Mostrar_Merchandising.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        Btn_Mostrar_Merchandising.setText("Merchandising");
        Btn_Mostrar_Merchandising.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_Mostrar_MerchandisingActionPerformed(evt);
            }
        });
        P_Botones.add(Btn_Mostrar_Merchandising);

        javax.swing.GroupLayout P_RegistroVisitantesLayout = new javax.swing.GroupLayout(P_RegistroVisitantes);
        P_RegistroVisitantes.setLayout(P_RegistroVisitantesLayout);
        P_RegistroVisitantesLayout.setHorizontalGroup(
            P_RegistroVisitantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_RegistroVisitantesLayout.createSequentialGroup()
                .addComponent(P_Visitantes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(P_Botones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        P_RegistroVisitantesLayout.setVerticalGroup(
            P_RegistroVisitantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(P_Visitantes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(P_Botones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jMenu1.setBackground(new java.awt.Color(133, 113, 64));
        jMenu1.setText("Archivo");
        jMenu1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jMenu1.setOpaque(false);

        menu_Nueva.setText("Nueva");
        menu_Nueva.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        meu_solInfo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        meu_solInfo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        meu_solInfo.setText("Solicitud de Información");
        meu_solInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meu_solInfoActionPerformed(evt);
            }
        });
        menu_Nueva.add(meu_solInfo);

        menu_VentaEntradas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        menu_VentaEntradas.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        menu_VentaEntradas.setText("Venta de Entradas");
        menu_VentaEntradas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_VentaEntradasActionPerformed(evt);
            }
        });
        menu_Nueva.add(menu_VentaEntradas);

        menuReserva.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        menuReserva.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        menuReserva.setText("Reserva");
        menuReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuReservaActionPerformed(evt);
            }
        });
        menu_Nueva.add(menuReserva);

        menu_ventaMerchan.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        menu_ventaMerchan.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        menu_ventaMerchan.setText("Venta de Merchandising");
        menu_ventaMerchan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_ventaMerchanActionPerformed(evt);
            }
        });
        menu_Nueva.add(menu_ventaMerchan);

        jMenu1.add(menu_Nueva);

        menuSalir.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        menuSalir.setText("Salir");
        menuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSalirActionPerformed(evt);
            }
        });
        jMenu1.add(menuSalir);

        menuBar_Menu.add(jMenu1);

        menu_Registros.setBackground(new java.awt.Color(133, 113, 64));
        menu_Registros.setText("Registros");
        menu_Registros.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        menu_Registros.setOpaque(false);

        menuH_Visitantes.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.ALT_MASK));
        menuH_Visitantes.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        menuH_Visitantes.setText("Visitantes");
        menuH_Visitantes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuH_VisitantesActionPerformed(evt);
            }
        });
        menu_Registros.add(menuH_Visitantes);

        menuH_Info.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.ALT_MASK));
        menuH_Info.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        menuH_Info.setText("Solicitudes de Información");
        menuH_Info.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuH_InfoActionPerformed(evt);
            }
        });
        menu_Registros.add(menuH_Info);

        menuH_Entradas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK));
        menuH_Entradas.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        menuH_Entradas.setText("Venta de Entradas");
        menuH_Entradas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuH_EntradasActionPerformed(evt);
            }
        });
        menu_Registros.add(menuH_Entradas);

        menuH_Reservas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK));
        menuH_Reservas.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        menuH_Reservas.setText("Reservas");
        menuH_Reservas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuH_ReservasActionPerformed(evt);
            }
        });
        menu_Registros.add(menuH_Reservas);

        menuH_Merchandising.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.ALT_MASK));
        menuH_Merchandising.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        menuH_Merchandising.setText("Merchandising");
        menuH_Merchandising.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuH_MerchandisingActionPerformed(evt);
            }
        });
        menu_Registros.add(menuH_Merchandising);

        menuBar_Menu.add(menu_Registros);

        menu_Facturación.setBackground(new java.awt.Color(133, 113, 64));
        menu_Facturación.setText("Facturación");
        menu_Facturación.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        menu_Facturación.setOpaque(false);

        menu_facturacion.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_MASK));
        menu_facturacion.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        menu_facturacion.setText("Ver facturación");
        menu_facturacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_facturacionActionPerformed(evt);
            }
        });
        menu_Facturación.add(menu_facturacion);

        menuBar_Menu.add(menu_Facturación);

        menu_Configuracion.setBackground(new java.awt.Color(133, 113, 64));
        menu_Configuracion.setText("Configuración");
        menu_Configuracion.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        menu_Configuracion.setOpaque(false);

        menu_configTipoEntrada.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        menu_configTipoEntrada.setText("Gestionar tipos de entrada");
        menu_configTipoEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_configTipoEntradaActionPerformed(evt);
            }
        });
        menu_Configuracion.add(menu_configTipoEntrada);

        menu_confirMerchan.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        menu_confirMerchan.setText("Gestionar productos promocionales");
        menu_confirMerchan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_confirMerchanActionPerformed(evt);
            }
        });
        menu_Configuracion.add(menu_confirMerchan);

        menu_Color.setText("Estilo de interfaz");
        menu_Color.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N

        colorOriginal.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        colorOriginal.setText("Original");
        colorOriginal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorOriginalActionPerformed(evt);
            }
        });
        menu_Color.add(colorOriginal);

        coloresCalidos.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        coloresCalidos.setText("Colores Cálidos");
        coloresCalidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coloresCalidosActionPerformed(evt);
            }
        });
        menu_Color.add(coloresCalidos);

        coloresNeutros.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        coloresNeutros.setText("Colores Neutros");
        coloresNeutros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coloresNeutrosActionPerformed(evt);
            }
        });
        menu_Color.add(coloresNeutros);

        coloresFrios.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        coloresFrios.setText("Colores Fríos");
        coloresFrios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coloresFriosActionPerformed(evt);
            }
        });
        menu_Color.add(coloresFrios);

        coloresPersonalizados.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        coloresPersonalizados.setText("Colores Personalizados");
        coloresPersonalizados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coloresPersonalizadosActionPerformed(evt);
            }
        });
        menu_Color.add(coloresPersonalizados);

        personalizarColor.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        personalizarColor.setText("Editar Colores Personalizados");
        personalizarColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personalizarColorActionPerformed(evt);
            }
        });
        menu_Color.add(personalizarColor);

        menu_Configuracion.add(menu_Color);

        menuBar_Menu.add(menu_Configuracion);

        setJMenuBar(menuBar_Menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(P_RegistroVisitantes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(P_RegistroVisitantes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Btn_RV_LimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_RV_LimpiarActionPerformed
        // Limpia los Spinner, ComboBox y CheckBox del Registro de Visitantes
        limpiarRegistroVisitantes();
    }//GEN-LAST:event_Btn_RV_LimpiarActionPerformed

    private void Btn_RV_RegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_RV_RegistrarActionPerformed
        // Comprueba los datos del formulario de Registro de Visitantes y en caso de ser correctos, conecta con la base de datos y los registra
        //Comprobaciones
        //Primera: Cantidad de visitantes debe ser superior a 0
        int cantidadVisitantes = (int) Spn_RV_Cantidad.getValue();
        if (cantidadVisitantes > 0) {
            int cantMujeresMenores = (int) Spn_RV_mn.getValue();
            int cantMujeresJovenes = (int) Spn_RV_mj.getValue();
            int cantMujeresAdultas = (int) Spn_RV_ma.getValue();
            int cantMujeresMayores = (int) Spn_RV_mm.getValue();
            int cantHombresMenores = (int) Spn_RV_hn.getValue();
            int cantHombresJovenes = (int) Spn_RV_hj.getValue();
            int cantHombresAdultos = (int) Spn_RV_ha.getValue();
            int cantHombresMayores = (int) Spn_RV_hm.getValue();
            int sumatorioVisitantes = cantMujeresMenores + cantMujeresJovenes + cantMujeresAdultas + cantMujeresMayores + cantHombresMenores + cantHombresJovenes + cantHombresAdultos + cantHombresMayores;
            //Segunda: Que la suma de las partes coincida con el total
            if (cantidadVisitantes == sumatorioVisitantes) {
                //Tercera: que procedencia sea rellenado
                int indexProcedencia = Cmb_RV_Procedencia.getSelectedIndex();
                if (indexProcedencia != 0) {
                    System.out.println("todo correcto"); //PROCEDEMOS A INTRODUCIR LOS DATOS
                    int NUM_REF = asignarID_Registro_Visitantes();
                    int REF_VISITA = asignarRefVisita_Registro_Visitantes();
                    String FECHA = Fecha.dimeFecha();
                    int CANTIDAD = sumatorioVisitantes;
                    String REF_SEXO = "H";
                    String REF_RANGOEDAD = "A";
                    String PROCEDENCIA_INTERNACIONAL;
                    if (Chb_RV_Internacional.isSelected()) {
                        PROCEDENCIA_INTERNACIONAL = "Y";
                    } else {
                        PROCEDENCIA_INTERNACIONAL = "N";
                    }

                    String PROCEDENCIA = (String) Cmb_RV_Procedencia.getSelectedItem();

                    //Registramos en función de los campos con valor
                    try {//y llamamos al método de la base de datos                 
                        if (cantMujeresMenores > 0) {
                            NUM_REF = asignarID_Registro_Visitantes();
                            registrarVisitantes(NUM_REF, REF_VISITA, FECHA, cantMujeresMenores, "M", "N", PROCEDENCIA_INTERNACIONAL, PROCEDENCIA);
                        }
                        if (cantMujeresJovenes > 0) {
                            NUM_REF = asignarID_Registro_Visitantes();
                            registrarVisitantes(NUM_REF, REF_VISITA, FECHA, cantMujeresJovenes, "M", "J", PROCEDENCIA_INTERNACIONAL, PROCEDENCIA);
                        }
                        if (cantMujeresAdultas > 0) {
                            NUM_REF = asignarID_Registro_Visitantes();
                            registrarVisitantes(NUM_REF, REF_VISITA, FECHA, cantMujeresAdultas, "M", "A", PROCEDENCIA_INTERNACIONAL, PROCEDENCIA);
                        }
                        if (cantMujeresMayores > 0) {
                            NUM_REF = asignarID_Registro_Visitantes();
                            registrarVisitantes(NUM_REF, REF_VISITA, FECHA, cantMujeresMayores, "M", "M", PROCEDENCIA_INTERNACIONAL, PROCEDENCIA);
                        }
                        if (cantHombresMenores > 0) {
                            NUM_REF = asignarID_Registro_Visitantes();
                            registrarVisitantes(NUM_REF, REF_VISITA, FECHA, cantHombresMenores, "H", "N", PROCEDENCIA_INTERNACIONAL, PROCEDENCIA);
                        }
                        if (cantHombresJovenes > 0) {
                            NUM_REF = asignarID_Registro_Visitantes();
                            registrarVisitantes(NUM_REF, REF_VISITA, FECHA, cantHombresJovenes, "H", "J", PROCEDENCIA_INTERNACIONAL, PROCEDENCIA);
                        }
                        if (cantHombresAdultos > 0) {
                            NUM_REF = asignarID_Registro_Visitantes();
                            registrarVisitantes(NUM_REF, REF_VISITA, FECHA, cantHombresAdultos, "H", "A", PROCEDENCIA_INTERNACIONAL, PROCEDENCIA);
                        }
                        if (cantHombresMayores > 0) {
                            NUM_REF = asignarID_Registro_Visitantes();
                            registrarVisitantes(NUM_REF, REF_VISITA, FECHA, cantHombresMayores, "H", "M", PROCEDENCIA_INTERNACIONAL, PROCEDENCIA);
                        }
                        JOptionPane.showMessageDialog(rootPane, "Registro realizado con éxito", "Información", 1);
                    } catch (SQLException ex) {
                        Logger.getLogger(F_Base.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, "El campo procedencia debe rellenarse", "Error", 2);
                }
            } else {
                System.out.println("Error en la suma");
                JOptionPane.showMessageDialog(rootPane, "La cantidad total de visitantes debe ser coincidente con la introducida en los rangos de edad y sexo", "Error", 2);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "La cantidad de visitantes debe ser superior a 0", "Error", 2);
        }
    }//GEN-LAST:event_Btn_RV_RegistrarActionPerformed

    private void Chb_RV_InternacionalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Chb_RV_InternacionalMouseClicked
        // TODO add your handling code here:
        cargarComboBoxProcedencias();
    }//GEN-LAST:event_Chb_RV_InternacionalMouseClicked

    private void menuH_VisitantesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuH_VisitantesActionPerformed
        // TODO add your handling code here:
        if (historicoVisitantes == null) {
            historicoVisitantes = new F_Historico_Visitantes();
        }
        historicoVisitantes.setLocationRelativeTo(this);
        historicoVisitantes.setVisible(true);
        historicoVisitantes.rellenarTabla();
    }//GEN-LAST:event_menuH_VisitantesActionPerformed

    private void Btn_Mostrar_InformacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_Mostrar_InformacionActionPerformed
        abrirFormularioInformacion();
    }//GEN-LAST:event_Btn_Mostrar_InformacionActionPerformed

    private void Btn_Mostrar_VentaEntradasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_Mostrar_VentaEntradasActionPerformed
        abrirFormularioVentaEntradas();
    }//GEN-LAST:event_Btn_Mostrar_VentaEntradasActionPerformed

    private void Btn_Mostrar_ReservasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_Mostrar_ReservasActionPerformed
        abrirFormularioReservas();
    }//GEN-LAST:event_Btn_Mostrar_ReservasActionPerformed

    private void Btn_Mostrar_MerchandisingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_Mostrar_MerchandisingActionPerformed
        abrirFormularioMerchandising();
     }//GEN-LAST:event_Btn_Mostrar_MerchandisingActionPerformed

    private void menuH_InfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuH_InfoActionPerformed
        // TODO add your handling code here:
        if (historicoInformacion == null) {
            historicoInformacion = new F_Historico_Informacion();
        }
        historicoInformacion.setLocationRelativeTo(this);
        historicoInformacion.setVisible(true);
        historicoInformacion.rellenarTabla();
    }//GEN-LAST:event_menuH_InfoActionPerformed

    private void menuH_EntradasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuH_EntradasActionPerformed
        // TODO add your handling code here:
        if (historicoEntradas == null) {
            historicoEntradas = new F_Historico_Entradas();
        }
        historicoEntradas.setLocationRelativeTo(this);
        historicoEntradas.setVisible(true);
        historicoEntradas.rellenarTabla();
    }//GEN-LAST:event_menuH_EntradasActionPerformed

    private void menuH_ReservasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuH_ReservasActionPerformed
        if (historicoReservas == null) {
            historicoReservas = new F_Historico_Reservas();
        }
        historicoReservas.setLocationRelativeTo(this);
        historicoReservas.setVisible(true);
        historicoReservas.rellenarTabla();
    }//GEN-LAST:event_menuH_ReservasActionPerformed

    private void menuH_MerchandisingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuH_MerchandisingActionPerformed
        if (historicoMerchandising == null) {
            historicoMerchandising = new F_Historico_Merchandising();
        }
        historicoMerchandising.setLocationRelativeTo(this);
        historicoMerchandising.setVisible(true);
        historicoMerchandising.rellenarTabla();
    }//GEN-LAST:event_menuH_MerchandisingActionPerformed

    private void menu_facturacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_facturacionActionPerformed
        // TODO add your handling code here:
        if (facturacion == null) {
            facturacion = new F_Facturacion();
        }
        facturacion.setLocationRelativeTo(this);
        facturacion.setVisible(true);

    }//GEN-LAST:event_menu_facturacionActionPerformed

    private void menu_ventaMerchanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_ventaMerchanActionPerformed
        abrirFormularioMerchandising();
    }//GEN-LAST:event_menu_ventaMerchanActionPerformed

    private void meu_solInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meu_solInfoActionPerformed
        // TODO add your handling code here:
        abrirFormularioInformacion();
    }//GEN-LAST:event_meu_solInfoActionPerformed

    private void menu_VentaEntradasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_VentaEntradasActionPerformed
        abrirFormularioVentaEntradas();
    }//GEN-LAST:event_menu_VentaEntradasActionPerformed

    private void menuReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuReservaActionPerformed
        abrirFormularioReservas();
    }//GEN-LAST:event_menuReservaActionPerformed

    private void menuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSalirActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_menuSalirActionPerformed

    private void menu_configTipoEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_configTipoEntradaActionPerformed
        // TODO add your handling code here:
        if (configuracionEntradas == null) {
        }
        configuracionEntradas = new F_ConfiguracionEntradas();
        configuracionEntradas.setLocationRelativeTo(this);
        configuracionEntradas.setVisible(true);
    }//GEN-LAST:event_menu_configTipoEntradaActionPerformed

    private void menu_confirMerchanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_confirMerchanActionPerformed
        if (configuracionMerchandising == null) {
        }
        configuracionMerchandising = new F_ConfiguracionMerchandising();
        configuracionMerchandising.setLocationRelativeTo(this);
        configuracionMerchandising.setVisible(true);
    }//GEN-LAST:event_menu_confirMerchanActionPerformed

    private void colorOriginalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorOriginalActionPerformed
        ColorInterfaz.porDefecto();
        fijaPreferenciaColor(1);
        implementaColor();
    }//GEN-LAST:event_colorOriginalActionPerformed

    private void coloresNeutrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coloresNeutrosActionPerformed
        ColorInterfaz.coloresNeutros();
        fijaPreferenciaColor(3);
        implementaColor();
    }//GEN-LAST:event_coloresNeutrosActionPerformed

    private void coloresFriosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coloresFriosActionPerformed
        // TODO add your handling code here:
        ColorInterfaz.coloresFrios();
        fijaPreferenciaColor(4);
        implementaColor();
    }//GEN-LAST:event_coloresFriosActionPerformed

    private void coloresCalidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coloresCalidosActionPerformed
        // TODO add your handling code here:
        ColorInterfaz.coloresCalidos();
        fijaPreferenciaColor(2);
        implementaColor();

    }//GEN-LAST:event_coloresCalidosActionPerformed

    private void personalizarColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personalizarColorActionPerformed
        // TODO add your handling code here:
        abrirFormularioColores();
    }//GEN-LAST:event_personalizarColorActionPerformed

    private void coloresPersonalizadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coloresPersonalizadosActionPerformed
        ColorInterfaz.coloresPersonalizados();
        fijaPreferenciaColor(5);
        implementaColor();
    }//GEN-LAST:event_coloresPersonalizadosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(F_Base.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(F_Base.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(F_Base.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(F_Base.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new F_Base().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton Btn_Mostrar_Informacion;
    private static javax.swing.JButton Btn_Mostrar_Merchandising;
    private static javax.swing.JButton Btn_Mostrar_Reservas;
    private static javax.swing.JButton Btn_Mostrar_VentaEntradas;
    private static javax.swing.JButton Btn_RV_Limpiar;
    private static javax.swing.JButton Btn_RV_Registrar;
    private javax.swing.JCheckBox Chb_RV_Internacional;
    private javax.swing.JComboBox<String> Cmb_RV_Procedencia;
    private static javax.swing.JPanel P_Botones;
    private static javax.swing.JPanel P_RV_SexoYEdad;
    private javax.swing.JPanel P_RegistroVisitantes;
    private static javax.swing.JPanel P_Visitantes;
    private javax.swing.JSpinner Spn_RV_Cantidad;
    private javax.swing.JSpinner Spn_RV_ha;
    private javax.swing.JSpinner Spn_RV_hj;
    private javax.swing.JSpinner Spn_RV_hm;
    private javax.swing.JSpinner Spn_RV_hn;
    private javax.swing.JSpinner Spn_RV_ma;
    private javax.swing.JSpinner Spn_RV_mj;
    private javax.swing.JSpinner Spn_RV_mm;
    private javax.swing.JSpinner Spn_RV_mn;
    private javax.swing.JMenuItem colorOriginal;
    private javax.swing.JMenuItem coloresCalidos;
    private javax.swing.JMenuItem coloresFrios;
    private javax.swing.JMenuItem coloresNeutros;
    private javax.swing.JMenuItem coloresPersonalizados;
    private javax.swing.JMenu jMenu1;
    private static javax.swing.JLabel labelTitulo;
    private javax.swing.JLabel lblAdultos;
    private javax.swing.JLabel lblCantidad;
    private javax.swing.JLabel lblGuion;
    private javax.swing.JLabel lblHombres;
    private javax.swing.JLabel lblJovenes;
    private javax.swing.JLabel lblMayores;
    private javax.swing.JLabel lblMenores;
    private javax.swing.JLabel lblMujeres;
    private javax.swing.JLabel lblProcedencia;
    private javax.swing.JMenuBar menuBar_Menu;
    private javax.swing.JMenuItem menuH_Entradas;
    private javax.swing.JMenuItem menuH_Info;
    private javax.swing.JMenuItem menuH_Merchandising;
    private javax.swing.JMenuItem menuH_Reservas;
    private javax.swing.JMenuItem menuH_Visitantes;
    private javax.swing.JMenuItem menuReserva;
    private javax.swing.JMenuItem menuSalir;
    private javax.swing.JMenu menu_Color;
    private javax.swing.JMenu menu_Configuracion;
    private javax.swing.JMenu menu_Facturación;
    private javax.swing.JMenu menu_Nueva;
    private javax.swing.JMenu menu_Registros;
    private javax.swing.JMenuItem menu_VentaEntradas;
    private javax.swing.JMenuItem menu_configTipoEntrada;
    private javax.swing.JMenuItem menu_confirMerchan;
    private javax.swing.JMenuItem menu_facturacion;
    private javax.swing.JMenuItem menu_ventaMerchan;
    private javax.swing.JMenuItem meu_solInfo;
    private javax.swing.JMenuItem personalizarColor;
    // End of variables declaration//GEN-END:variables

//MÉTODOS REGISTRO VISITANTES
    /**
     * Método que permite limpiar el formulario de ingreso de visitantes,
     * reseteando los ComboBox, CheckBox y Spinners.
     */
    public void limpiarRegistroVisitantes() {
        //Limpia el formulario del registro de visitantes
        Spn_RV_Cantidad.setValue(0);
        Cmb_RV_Procedencia.setSelectedIndex(0);
        Chb_RV_Internacional.setSelected(false);
        Spn_RV_mn.setValue(0);
        Spn_RV_mj.setValue(0);
        Spn_RV_ma.setValue(0);
        Spn_RV_mm.setValue(0);
        Spn_RV_hn.setValue(0);
        Spn_RV_hj.setValue(0);
        Spn_RV_ha.setValue(0);
        Spn_RV_hm.setValue(0);
    }

    /**
     * Método que realiza el ingreso de visitantes en la base de datos. Para
     * cada rango de edad y sexo se genera un registro de visitantes que
     * comparte el mismo número de referencia de visita.
     *
     * @param NUM_REF Clave primaria de la tabla Registro_Visitantes. La
     * autogenera previa consulta a dicha tabla.
     * @param REF_VISITA Número de referencia del grupo de visitantes. Se
     * autogenera previa consulta a la tabla Registro_Visitantes. Todos los
     * visitantes que se insertan a la vez poseen el msmo número de referencia
     * de visita.
     * @param FECHA Fecha del ingreso de la información en la base de datos. Se
     * supone que se corresponde con la de la visita del grupo. Se calcula a
     * partir de la fecha del sistema.
     * @param CANTIDAD Cantidad de visitantes. El valor se extrae del
     * formulario.
     * @param REF_SEXO Sexo de los visitantes. El valor se extrae del
     * formulario.
     * @param REF_RANGOEDAD Rango de edad de los visitantes, el valor se extrae
     * del formulario.
     * @param PROCEDENCIA_INTERNACIONAL Indica con Y (yes) o N (No) si la
     * procedencia de los visitantes es internacional.
     * @param PROCEDENCIA Indica la comunidad autónoma o país de procedencia de
     * los visitantes.
     * @throws SQLException Excepción en caso de no poder conectar con la base
     * de datos
     */
    public void registrarVisitantes(int NUM_REF, int REF_VISITA, String FECHA, int CANTIDAD, String REF_SEXO, String REF_RANGOEDAD, String PROCEDENCIA_INTERNACIONAL, String PROCEDENCIA) throws SQLException {
        //Conexión a la base de datos
        ConexionBaseDatos.ConexionBaseDatos();
        Connection conexion = ConexionBaseDatos.getConnection();
        //Insertar los datos
        String datosInsercion = "INSERT INTO REGISTRO_VISITANTES VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement sentencia = conexion.prepareStatement(datosInsercion);
        sentencia.setInt(1, NUM_REF);
        sentencia.setInt(2, REF_VISITA);
        sentencia.setString(3, FECHA);
        sentencia.setInt(4, CANTIDAD);
        sentencia.setString(5, REF_SEXO);
        sentencia.setString(6, REF_RANGOEDAD);
        sentencia.setString(7, PROCEDENCIA_INTERNACIONAL);
        sentencia.setString(8, PROCEDENCIA);
        sentencia.executeUpdate();
        //Cerrar la conexión
        sentencia.close();
        ConexionBaseDatos.desconexionBaseDatos();
        System.out.println("Inserción en base de datos realizada");
        limpiarRegistroVisitantes(); //reseteamos los campos del formulario
        cargarComboBoxProcedencias();
    }

    /**
     * Método que rellena el ComboBox 'Procedencia' del formulario de ingreso de
     * visitantes. En función de si el CheckBox 'Internacional' está marcado o
     * no, los ítems son Comunidades Autónomas o Países.
     */
    public void cargarComboBoxProcedencias() {
        try {
            //reseteamos la lista de procedencias y los ítems del combo box
            listaProcedencias = new ArrayList<>();
            Cmb_RV_Procedencia.removeAllItems();

            ConexionBaseDatos.ConexionBaseDatos();
            Connection conexion = ConexionBaseDatos.getConnection();
            Statement sentencia = conexion.createStatement();
            String sql;
            if (!Chb_RV_Internacional.isSelected()) {
                sql = "SELECT * FROM PROCEDENCIA WHERE TIPO = 'N'";
            } else {
                sql = "SELECT * FROM PROCEDENCIA WHERE TIPO = 'I'";
            }
            ResultSet resul = sentencia.executeQuery(sql);
            //Recorremos el resulSet introducinedo todo en nuestro Array del comboBox
            while (resul.next()) {
                listaProcedencias.add(resul.getString(1));
            }
            resul.close();
            sentencia.close();
            //conexion.close(); lo cerramos a continuación desde la clase
            ConexionBaseDatos.desconexionBaseDatos();

        } catch (SQLException ex) {
            System.out.println("Error al conectar a la base de datos desde el método cargarComboBoxProcedencias");
            Logger.getLogger(F_Base.class.getName()).log(Level.SEVERE, null, ex);
        }
        Cmb_RV_Procedencia.removeAllItems();
        Cmb_RV_Procedencia.addItem("-- Escoge una procedencia");
        for (String element : listaProcedencias) {
            Cmb_RV_Procedencia.addItem(element);
        }
    }

    /**
     * Método que consulta en la tabla Registro_Visitantes de la Base de Datos
     * el número NUM_REF (Clave Primaria) más alto existente y devuelve el
     * siguiente, de forma que se autogenere la siguiente clave primaria para el
     * siguiente registro de visitantes.
     *
     * @return Devuelve un entero que será la clave primaria del siguente
     * registro de visitantes
     */
    public int asignarID_Registro_Visitantes() {
        Connection conexion;
        int numeroRef = 0;
        try {
            //Conexion = DriverManager.getConnection(urlV, usuario, clave);
            ConexionBaseDatos.ConexionBaseDatos();
            conexion = ConexionBaseDatos.getConnection();
            Statement sentencia = conexion.createStatement();
            String sql;
            sql = "SELECT MAX (NUM_REF) FROM REGISTRO_VISITANTES";

            ResultSet resul = sentencia.executeQuery(sql);
            if (resul.next()) { //Sólo tiene que devolver un único resultado
                System.out.println("En el registro de visitantes hay al menos algún registro para calcular el NUM_REF");
                numeroRef = resul.getInt(1);
            } else {
                System.out.println("En el registro de visitantes NO hay ningún registro para calcular el NUM_REF");
                numeroRef = 0;
            }

            resul.close();
            sentencia.close();
            //conexion.close();
            ConexionBaseDatos.desconexionBaseDatos();
        } catch (SQLException ex) {
            Logger.getLogger(F_Base.class.getName()).log(Level.SEVERE, null, ex);
        }
        return numeroRef + 1;//al máximo número encontrado en la tabla le sumamos 1. Creamos así un campo autoincremental
    }

    /**
     * Método que consulta en la tabla Registro de Visitantes el número de
     * referenca de visita más alto existente, para autogenerar el siguiente
     * número de referencia y asignarlo al siguiente registro de visitantes.
     *
     * @return Devuelve un entero que será el Ref_Visita del siguiente grupo a
     * registrar.
     */
    public int asignarRefVisita_Registro_Visitantes() {
        Connection conexion;
        int refVisita = 0;
        try {
            //conexion = DriverManager.getConnection(urlV, usuario, clave);
            ConexionBaseDatos.ConexionBaseDatos();
            conexion = ConexionBaseDatos.getConnection();
            Statement sentencia = conexion.createStatement();
            String sql;
            sql = "SELECT MAX (REF_VISITA) FROM REGISTRO_VISITANTES";

            ResultSet resul = sentencia.executeQuery(sql);
            if (resul.next()) { //Sólo tiene que devolver un único resultado
                System.out.println("En el registro de visitantes hay al menos algún registro para calcular el Ref_Visita");
                refVisita = resul.getInt(1);
            } else {
                System.out.println("En el registro de visitantes NO hay ningún registro para calcular el Ref_Visita");
                refVisita = 0;
            }
            resul.close();
            sentencia.close();
            //conexion.close();
            ConexionBaseDatos.desconexionBaseDatos();
        } catch (SQLException ex) {
            Logger.getLogger(F_Base.class.getName()).log(Level.SEVERE, null, ex);
        }
        return refVisita + 1;//al máximo número encontrado en la tabla le sumamos 1. Creamos así un campo autoincremental
    }

    /**
     * Método que crea (en caso de no existir) o muestra el formulario de
     * ingreso de solicitudes de información.
     */
    public void abrirFormularioInformacion() {
        if (informacion == null) {
            informacion = new F_Informacion();
        }
        informacion.setLocationRelativeTo(this);
        informacion.setVisible(true);
        informacion.limpiarFormularioInformacion();
    }

    /**
     * Método que crea (en caso de no existir) o muestra el formulario de venta
     * de entradas.
     */
    public void abrirFormularioVentaEntradas() {
        if (ventaEntradas == null) {
            ventaEntradas = new F_VentaEntradas();
        }
        ventaEntradas.setLocationRelativeTo(this);
        ventaEntradas.setVisible(true);
        ventaEntradas.cargarComboBoxEntradas();
    }

    /**
     * Método que crea (en caso de no existir) o muestra el formulario de
     * reservas.
     */
    public void abrirFormularioReservas() {
        if (reservas == null) {
            reservas = new F_Reservas();
        }
        reservas.setLocationRelativeTo(this);
        reservas.setVisible(true);
        reservas.cargarComboBoxActividades();
    }

    /**
     * Método que crea (en caso de no existir) o muestra el formulario de venta
     * de productos promocionales (Merchandising).
     */
    public void abrirFormularioMerchandising() {
        if (merchandising == null) {
            merchandising = new F_Merchandising();
        }
        merchandising.setLocationRelativeTo(this);
        merchandising.setVisible(true);
        merchandising.cargarComboBox();
        merchandising.limpiarFormularioMerchan();
        merchandising.restablecerPedido();
        merchandising.mostrarDatos();
    }

    /**
     * Método que establece los colores de los paneles, botoneras, otros
     * componentes y texto del formulario de Registro de Visitantes.
     *
     * @param colorFondo Color del fondo de las ventanas.
     * @param colorBotones Color del fondo de los botones.
     * @param colorTexto Color del texto de etiquetas y botones.
     */
    public void establecerColor(Color colorFondo, Color colorBotones, Color colorTexto) {
        //Paneles
        P_Visitantes.setBackground(colorFondo);
        P_RV_SexoYEdad.setBackground(colorFondo);
        P_Botones.setBackground(colorFondo);

        //Botones
        Btn_Mostrar_Informacion.setBackground(colorBotones);
        Btn_Mostrar_Merchandising.setBackground(colorBotones);
        Btn_Mostrar_Reservas.setBackground(colorBotones);
        Btn_Mostrar_VentaEntradas.setBackground(colorBotones);
        Btn_RV_Registrar.setBackground(colorBotones);
        Btn_RV_Limpiar.setBackground(colorBotones);

        //Textos
        labelTitulo.setForeground(colorTexto);
        lblCantidad.setForeground(colorTexto);
        lblProcedencia.setForeground(colorTexto);
        lblHombres.setForeground(colorTexto);
        lblMujeres.setForeground(colorTexto);
        lblMenores.setForeground(colorTexto);
        lblJovenes.setForeground(colorTexto);
        lblAdultos.setForeground(colorTexto);
        lblMayores.setForeground(colorTexto);
        lblGuion.setForeground(colorTexto);

        Btn_Mostrar_Informacion.setForeground(colorTexto);
        Btn_Mostrar_Merchandising.setForeground(colorTexto);
        Btn_Mostrar_Reservas.setForeground(colorTexto);
        Btn_Mostrar_VentaEntradas.setForeground(colorTexto);
        Btn_RV_Registrar.setForeground(colorTexto);
        Btn_RV_Limpiar.setForeground(colorTexto);

        //Otros
        Spn_RV_Cantidad.setForeground(colorTexto);
        Cmb_RV_Procedencia.setForeground(colorTexto);
        Chb_RV_Internacional.setForeground(colorTexto);
        P_RV_SexoYEdad.setForeground(colorTexto);
    }

    /**
     * Método desde el cual se llama al método establecerColor() de cada una de
     * las ventanas generadas desde el formulario principal, para modificar los
     * colores de Fondo, Botones y Texto de cada una de ellas en función de las
     * preferencias escogidas por el usuario.
     */
    public void implementaColor() {
        Color color0, color1, color2;
        color0 = (ColorInterfaz.dimeColores()[0]);
        color1 = (ColorInterfaz.dimeColores()[1]);
        color2 = (ColorInterfaz.dimeColores()[2]);
        establecerColor(color0, color1, color2);

        //Formularios
        if (informacion != null) {
            informacion.establecerColor();
        }
        if (merchandising != null) {
            merchandising.establecerColor();
        }
        if (ventaEntradas != null) {
            ventaEntradas.establecerColor();
        }
        if (reservas != null) {
            reservas.establecerColor();
        }
        if (facturacion != null) {
            facturacion.establecerColor();
        }

        //Históricos
        if (historicoVisitantes != null) {
            historicoVisitantes.establecerColor();
        }
        if (historicoEntradas != null) {
            historicoEntradas.establecerColor();
        }
        if (historicoInformacion != null) {
            historicoInformacion.establecerColor();
        }
        if (historicoMerchandising != null) {
            historicoMerchandising.establecerColor();
        }
        if (historicoReservas != null) {
            historicoReservas.establecerColor();
        }
    }

    /**
     * Método crea (si no existía) o muestra el formulario de personalización de
     * los colores de la aplicación.
     */
    public void abrirFormularioColores() {
        if (formularioColores == null) {
            formularioColores = new F_PaletaColores();
        }
        formularioColores.setLocationRelativeTo(this);
        formularioColores.setVisible(true);
    }

    /**
     * Método que, una vez escogida una preferencia de estilo de colores desede
     * el menú de configuración, la guarda en la base de datos para su
     * persistencia cuando se cierre la aplicación.
     *
     * @param preferencia Recibe por parámetro el número de preferencia: 1 para
     * diseño original, 2 para colores cálidos, 3 para neutros, 4 para fríos y 5
     * para personalizados.
     */
    public void fijaPreferenciaColor(int preferencia) {
        ConexionBaseDatos.ConexionBaseDatos();
        Connection conexion = ConexionBaseDatos.getConnection();
        String datosActualizacion = "UPDATE PREFERENCIAS SET PREFERENCIA = " + preferencia + " WHERE CONCEPTO = 'COLORES'";
        System.out.println(datosActualizacion);
        PreparedStatement sentencia;
        try {
            sentencia = conexion.prepareStatement(datosActualizacion);
            sentencia.executeUpdate();
            JOptionPane.showMessageDialog(rootPane, "Preferencias modificadas con éxito", "Información", 3);
        } catch (SQLException ex) {
            Logger.getLogger(F_Historico_Visitantes.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Los datos introducidos no son válidos.\nLas preferencias de color NO han sido modificado.", "Error", 2);
        }
        ConexionBaseDatos.desconexionBaseDatos();
    }

    /**
     * Método llamado al iniciarse la aplicación y que, tras consultar en la
     * base de datos las preferencias de estilo de color guardadas, aplica un
     * estido u otro en función de las mismas.
     */
    public void cargarColoresInicio() {
        int configuracionColor = 0;
        //consultar a base de datos, configuracionColor = lo que devuelva la tabla preferencias_Colores
        ConexionBaseDatos.ConexionBaseDatos();
        Connection conexion = ConexionBaseDatos.getConnection();
        Statement sentencia;
        try {
            sentencia = conexion.createStatement();
            String sql;
            sql = "SELECT PREFERENCIA FROM PREFERENCIAS WHERE CONCEPTO = 'COLORES'";
            ResultSet resul = sentencia.executeQuery(sql);
            while (resul.next()) {
                configuracionColor = resul.getInt(1);
            }
        } catch (SQLException ex) {
            Logger.getLogger(F_Historico_Visitantes.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Error al tratar de conectar con la base de datos desde cargarColoresInicio");
        }

        ConexionBaseDatos.desconexionBaseDatos();
        switch (configuracionColor) {
            case 1: //original
                ColorInterfaz.porDefecto();
                implementaColor();
                break;
            case 2: //colores cálidos
                ColorInterfaz.coloresCalidos();
                implementaColor();
                break;
            case 3: //colores neutros
                ColorInterfaz.coloresNeutros();
                implementaColor();
                break;
            case 4://colores fríos
                ColorInterfaz.coloresFrios();
                implementaColor();
                break;
            case 5://colores personalizados
                ColorInterfaz.coloresPersonalizados();
                implementaColor();
                break;
            default: //por defecto usamos el original
                ColorInterfaz.porDefecto();
                fijaPreferenciaColor(1);
                implementaColor();

        }
    }
}
