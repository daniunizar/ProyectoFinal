/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package formularios;

import Programa.F_Base;
import objetosSimples.Reserva;
import auxiliares.ConexionBaseDatos;
import auxiliares.Fecha;
import configuracion.ColorInterfaz;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * Esta clase gestiona la introducción de nuevas reservas al museo en la Base de
 * Datos.
 *
 * @author Daniel Marcos Muñoz
 */
public class F_Reservas extends javax.swing.JFrame {

    ArrayList<String> listaActividades;

    /**
     * Creates new form F_Resevas
     */
    public F_Reservas() {
        initComponents();
        establecerColor();
        setTitle("Centro de Investigación El Fuerte");
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelFondo = new javax.swing.JPanel();
        labelTitulo = new javax.swing.JLabel();
        calendarioReservas = new rojeru_san.componentes.RSCalendar();
        btnDisponibilidad = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaDisponibilidad = new javax.swing.JTextArea();
        campoEntidad = new javax.swing.JTextField();
        lblEntidad = new javax.swing.JLabel();
        lblActividad = new javax.swing.JLabel();
        lblCantidad = new javax.swing.JLabel();
        lblContacto = new javax.swing.JLabel();
        campoContacto = new javax.swing.JTextField();
        lblCargo = new javax.swing.JLabel();
        campoCargo = new javax.swing.JTextField();
        lblTlf = new javax.swing.JLabel();
        campoTlf = new javax.swing.JTextField();
        lblMail = new javax.swing.JLabel();
        campoMail = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaObservaciones = new javax.swing.JTextArea();
        btnRegistrar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        spn_R_Cantidad = new javax.swing.JSpinner();
        Cmb_R_Actividad = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        labelTitulo.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        labelTitulo.setText("Reservas");

        btnDisponibilidad.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnDisponibilidad.setText("Comprobar disponibilidad");
        btnDisponibilidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisponibilidadActionPerformed(evt);
            }
        });

        textAreaDisponibilidad.setEditable(false);
        textAreaDisponibilidad.setColumns(20);
        textAreaDisponibilidad.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        textAreaDisponibilidad.setRows(5);
        jScrollPane1.setViewportView(textAreaDisponibilidad);

        campoEntidad.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        campoEntidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoEntidadKeyTyped(evt);
            }
        });

        lblEntidad.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblEntidad.setText("Entidad:");

        lblActividad.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblActividad.setText("Actividad:");

        lblCantidad.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblCantidad.setText("Cantidad:");

        lblContacto.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblContacto.setText("Contacto:");

        campoContacto.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        campoContacto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoContactoKeyTyped(evt);
            }
        });

        lblCargo.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblCargo.setText("Cargo:");

        campoCargo.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        campoCargo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoCargoKeyTyped(evt);
            }
        });

        lblTlf.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblTlf.setText("Teléfono:");

        campoTlf.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        campoTlf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoTlfKeyTyped(evt);
            }
        });

        lblMail.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblMail.setText("E-Mail:");

        campoMail.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        campoMail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoMailKeyTyped(evt);
            }
        });

        textAreaObservaciones.setColumns(20);
        textAreaObservaciones.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        textAreaObservaciones.setRows(5);
        textAreaObservaciones.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Observaciones:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 24))); // NOI18N
        textAreaObservaciones.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textAreaObservacionesKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(textAreaObservaciones);

        btnRegistrar.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnLimpiar.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        spn_R_Cantidad.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        spn_R_Cantidad.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));

        Cmb_R_Actividad.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Cmb_R_Actividad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout panelFondoLayout = new javax.swing.GroupLayout(panelFondo);
        panelFondo.setLayout(panelFondoLayout);
        panelFondoLayout.setHorizontalGroup(
            panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoLayout.createSequentialGroup()
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelFondoLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelTitulo)
                            .addGroup(panelFondoLayout.createSequentialGroup()
                                .addComponent(calendarioReservas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1)
                                    .addComponent(btnDisponibilidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(panelFondoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panelFondoLayout.createSequentialGroup()
                                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblEntidad, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblActividad, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblCantidad, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(campoEntidad)
                                    .addComponent(spn_R_Cantidad)
                                    .addComponent(Cmb_R_Actividad, 0, 362, Short.MAX_VALUE)))
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblContacto, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblCargo, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblTlf, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblMail, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoContacto, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(campoCargo, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(campoTlf, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(campoMail, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelFondoLayout.createSequentialGroup()
                        .addGap(499, 499, 499)
                        .addComponent(btnRegistrar, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                        .addGap(46, 46, 46)
                        .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelFondoLayout.setVerticalGroup(
            panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(panelFondoLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDisponibilidad))
                    .addComponent(calendarioReservas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEntidad)
                    .addComponent(campoEntidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblContacto)
                    .addComponent(campoContacto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblActividad)
                    .addComponent(lblCargo)
                    .addComponent(campoCargo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Cmb_R_Actividad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblCantidad)
                        .addComponent(lblTlf)
                        .addComponent(campoTlf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(spn_R_Cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelFondoLayout.createSequentialGroup()
                        .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMail)
                            .addComponent(campoMail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnLimpiar)
                            .addComponent(btnRegistrar)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDisponibilidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisponibilidadActionPerformed
        try {
            // TODO add your handling code here:
            comprobarDisponibilidad();
        } catch (SQLException ex) {
            Logger.getLogger(F_Reservas.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Error al comprobar la disponibilidad de la fecha");
        }
    }//GEN-LAST:event_btnDisponibilidadActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        limpiarFormularioReservas();
        cargarComboBoxActividades();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        if (!campoEntidad.getText().equalsIgnoreCase("") && calendarioReservas.getDatoFecha() != null) {
            int num_reg = asignarNUM_REF_Registro_Reservas();
            String fecha_tramitacion = Fecha.dimeFecha();
            String fecha_reserva = Fecha.formateaFecha(calendarioReservas.getDatoFecha());
            String entidad = campoEntidad.getText();
            String actividad = (String) Cmb_R_Actividad.getSelectedItem();
            int cantidad = (int) spn_R_Cantidad.getValue();
            String contacto = campoContacto.getText();
            String cargo = campoCargo.getText();
            String tlf = campoTlf.getText();
            String mail = campoMail.getText();
            String observaciones = textAreaObservaciones.getText();
            try {
                registrarReserva(num_reg, fecha_tramitacion, fecha_reserva, entidad, actividad, cantidad, contacto, cargo, tlf, mail, observaciones);
                JOptionPane.showMessageDialog(rootPane, "Registro realizado con éxito", "Información", 1);
                limpiarFormularioReservas();
            } catch (SQLException ex) {
                Logger.getLogger(F_Reservas.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("Error al tratar de registrar una reserva en la base de datos.");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Los campos FECHA y ENTIDAD son obligatorios", "Error", 2);
        }
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void campoEntidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoEntidadKeyTyped
        // TODO add your handling code here:
        comprobarDimensionTexto(campoEntidad.getText(), 50, evt);
    }//GEN-LAST:event_campoEntidadKeyTyped

    private void campoContactoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoContactoKeyTyped
        // TODO add your handling code here:
        comprobarDimensionTexto(campoContacto.getText(), 50, evt);
    }//GEN-LAST:event_campoContactoKeyTyped

    private void campoCargoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoCargoKeyTyped
        // TODO add your handling code here:
        comprobarDimensionTexto(campoCargo.getText(), 50, evt);

    }//GEN-LAST:event_campoCargoKeyTyped

    private void campoTlfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoTlfKeyTyped
        // TODO add your handling code here:
        comprobarDimensionTexto(campoTlf.getText(), 9, evt);
    }//GEN-LAST:event_campoTlfKeyTyped

    private void campoMailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoMailKeyTyped
        // TODO add your handling code here:
        comprobarDimensionTexto(campoMail.getText(), 50, evt);

    }//GEN-LAST:event_campoMailKeyTyped

    private void textAreaObservacionesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaObservacionesKeyTyped
        // TODO add your handling code here:
        comprobarDimensionTexto(textAreaObservaciones.getText(), 255, evt);
    }//GEN-LAST:event_textAreaObservacionesKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(F_Reservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(F_Reservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(F_Reservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(F_Reservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new F_Reservas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Cmb_R_Actividad;
    private static javax.swing.JButton btnDisponibilidad;
    private static javax.swing.JButton btnLimpiar;
    private static javax.swing.JButton btnRegistrar;
    private rojeru_san.componentes.RSCalendar calendarioReservas;
    private javax.swing.JTextField campoCargo;
    private javax.swing.JTextField campoContacto;
    private javax.swing.JTextField campoEntidad;
    private javax.swing.JTextField campoMail;
    private javax.swing.JTextField campoTlf;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private static javax.swing.JLabel labelTitulo;
    private static javax.swing.JLabel lblActividad;
    private static javax.swing.JLabel lblCantidad;
    private static javax.swing.JLabel lblCargo;
    private static javax.swing.JLabel lblContacto;
    private static javax.swing.JLabel lblEntidad;
    private static javax.swing.JLabel lblMail;
    private static javax.swing.JLabel lblTlf;
    private static javax.swing.JPanel panelFondo;
    private javax.swing.JSpinner spn_R_Cantidad;
    private static javax.swing.JTextArea textAreaDisponibilidad;
    private static javax.swing.JTextArea textAreaObservaciones;
    // End of variables declaration//GEN-END:variables

    /**
     * Este método limpia el formulario de gestión de reservas resetando sus
     * componentes.
     */
    public void limpiarFormularioReservas() {
        //resetear calendario reservas... cómo???
        campoEntidad.setText("");
        Cmb_R_Actividad.setSelectedIndex(0);
        spn_R_Cantidad.setValue(0);
        textAreaObservaciones.setText("");
        campoContacto.setText("");
        campoCargo.setText("");
        campoTlf.setText("");
        campoMail.setText("");
    }

    /**
     * Este método comprueba, mediante la realización de una consulta a la Base
     * de Datos, la disponibilidad de una fecha. En caso de estar disponible se
     * hace saber al usuario, y de no estarlo se informa de la entidad y
     * actividad que han reservado ese día.
     *
     * @throws SQLException Puede lanzar excepciones de conectividad con la Base
     * de Datos.
     */
    public void comprobarDisponibilidad() throws SQLException {
        ArrayList<Reserva> listaCoincidencias = new ArrayList<>();
        String fechaSolicitada = Fecha.formateaFecha(calendarioReservas.getDatoFecha());
        System.out.println("Fecha solicitada: " + fechaSolicitada);
        int coincidencias = 0;
        ConexionBaseDatos.ConexionBaseDatos();
        Connection conexion = ConexionBaseDatos.getConnection();
        Statement sentencia = conexion.createStatement();
        String sql;
        sql = "SELECT * FROM REGISTRO_RESERVAS WHERE FECHA_RESERVA ='" + fechaSolicitada + "'";
        ResultSet resul = sentencia.executeQuery(sql);
        //Recorremos el resulSet introducinedo todo en nuestro Array del comboBox
        while (resul.next()) {
            Reserva reserva = new Reserva(resul.getInt(1), resul.getString(4), resul.getString(5));
            listaCoincidencias.add(reserva);
        }
        resul.close();
        sentencia.close();
        //conexion.close(); lo cerramos a continuación desde la clase
        ConexionBaseDatos.desconexionBaseDatos();
        coincidencias = listaCoincidencias.size();
        if (coincidencias > 0) {
            String textoAviso = "Detectadas " + coincidencias + " coincidencias:\n";
            for (Reserva element : listaCoincidencias) {
                textoAviso += "\n-" + element.toString();
            }
            textAreaDisponibilidad.setText(textoAviso);
        } else {
            textAreaDisponibilidad.setText("Fecha disponible.");
        }
    }

    /**
     * Método que asigna al nuevo registro de reserva su Clave Primaria, previa
     * consulta a la Base de Datos.
     *
     * @return Devuelve un entero con la clave primaria del nuevo registro.
     */
    public int asignarNUM_REF_Registro_Reservas() {
        Connection conexion;
        int numeroRef = 0;
        try {
            //Conexion = DriverManager.getConnection(urlV, usuario, clave);
            ConexionBaseDatos.ConexionBaseDatos();
            conexion = ConexionBaseDatos.getConnection();
            Statement sentencia = conexion.createStatement();
            String sql;
            sql = "SELECT MAX (NUM_REF) FROM REGISTRO_RESERVAS";

            ResultSet resul = sentencia.executeQuery(sql);
            if (resul.next()) { //Sólo tiene que devolver un único resultado
                System.out.println("En el registro de reservas hay al menos algún registro para calcular el NUM_REF");
                numeroRef = resul.getInt(1);
            } else {
                System.out.println("En el registro de reservas NO hay ningún registro para calcular el NUM_REF");
                numeroRef = 0;
            }

            resul.close();
            sentencia.close();
            //conexion.close();
            ConexionBaseDatos.desconexionBaseDatos();
        } catch (SQLException ex) {
            Logger.getLogger(F_Base.class.getName()).log(Level.SEVERE, null, ex);
        }
        return numeroRef + 1;//al máximo número encontrado en la tabla le sumamos 1. Creamos así un campo autoincremental
    }

    /**
     * Método que realiza el ingreso en la Base de Datos de una nueva reserva.
     *
     * @param num_ref Este valor es la clave primaria del nuevo registro de
     * reserva y se obtiene del método asignarNUM_REF_Registro_Reservas.
     * @param fecha_tramitacion Es la fecha de tramitación de la reserva, se
     * obtiene de la fecha del sistema en el momento de realizar el registro.
     * @param fecha_reserva Es la fecha reservada, se obtiene del componente
     * Calendar del formulario.
     * @param entidad Es el nombre de la entidad que reserva. Se obtiene del
     * formulario.
     * @param actividad Es la actividad que realizará la entidad que reserva. Se
     * obtiene del formulario.
     * @param cantidad Es la cantidad de personas que acudirán. Se obtiene del
     * formulario.
     * @param contacto Es el nombre del contacto de la entidad que realizó la
     * reserva. Se obtiene del formulario.
     * @param cargo Es el cargo del contacto de la entidad que realizó la
     * reserva. Se obtiene del formulario.
     * @param tlf Es el teléfono del contacto de la entidad que realizó la
     * reserva. Se obtiene del formulario.
     * @param mail Es el E-Mail del contacto de la entidad que realizó la
     * reserva. Se obtiene del formulario.
     * @param observaciones Recoge observaciones no previstas en el resto de
     * campos que afectan a la reserva. Se obtiene del formulario.
     * @throws SQLException Puede lanzar excepciones de conectividad con la Base
     * de Datos.
     */
    public void registrarReserva(int num_ref, String fecha_tramitacion, String fecha_reserva, String entidad, String actividad, int cantidad, String contacto, String cargo, String tlf, String mail, String observaciones) throws SQLException {
        ConexionBaseDatos.ConexionBaseDatos();
        Connection conexion = ConexionBaseDatos.getConnection();
        //Insertar los datos
        String datosInsercion = "INSERT INTO REGISTRO_RESERVAS VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement sentencia = conexion.prepareStatement(datosInsercion);
        sentencia.setInt(1, num_ref);
        sentencia.setString(2, fecha_tramitacion);
        sentencia.setString(3, fecha_reserva);
        sentencia.setString(4, entidad);
        sentencia.setString(5, actividad);
        sentencia.setInt(6, cantidad);
        sentencia.setString(7, contacto);
        sentencia.setString(8, cargo);
        sentencia.setString(9, tlf);
        sentencia.setString(10, mail);
        sentencia.setString(11, observaciones);
        sentencia.executeUpdate();
        //Cerrar la conexión
        sentencia.close();
        ConexionBaseDatos.desconexionBaseDatos();
        JOptionPane.showMessageDialog(rootPane, "Registro realizado con éxito", "Información", 1);
        limpiarFormularioReservas();
    }

    /**
     * Método que rellena de ítems el ComboBox que muestra las actividades que
     * se realizarán con el grupo que realiza la reserva.
     */
    public void cargarComboBoxActividades() {
        try {
            //reseteamos la lista de procedencias y los ítems del combo box
            listaActividades = new ArrayList<>();
            Cmb_R_Actividad.removeAllItems();

            //Connection conexion = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", usuario, clave);
            //Connection conexion = DriverManager.getConnection(urlV, "ad04", "ad04");
            ConexionBaseDatos.ConexionBaseDatos();
            Connection conexion = ConexionBaseDatos.getConnection();
            Statement sentencia = conexion.createStatement();
            String sql;
            sql = "SELECT * FROM ACTIVIDADES";

            ResultSet resul = sentencia.executeQuery(sql);
            //Recorremos el resulSet introducinedo todo en nuestro Array del comboBox
            while (resul.next()) {
                listaActividades.add(resul.getString(1));
            }
            resul.close();
            sentencia.close();
            //conexion.close(); lo cerramos a continuación desde la clase
            ConexionBaseDatos.desconexionBaseDatos();

        } catch (SQLException ex) {
            System.out.println("Error al conectar a la base de datos desde el método cargarComboBoxActividades");
            Logger.getLogger(F_Base.class.getName()).log(Level.SEVERE, null, ex);
        }

        Cmb_R_Actividad.removeAllItems();
        Cmb_R_Actividad.addItem("-- Escoge una actividad");
        for (String element : listaActividades) {
            Cmb_R_Actividad.addItem(element);
        }
    }

  /**
   * Métdo que controla la cantidad máxima de caracteres para cada campo en que el usuario puede introducir texto.
   * @param textoAComprobar Recibe por parámetro el texto a comprobar, se debe extraer de cada campo con un método getText().
   * @param cantidadCaracteresMaxima Recibe por parámetro la cantidad máxima de caracteres permitidos.
   * @param evt Recibe por parámetro el evento que activa este control. Generalmente un evento de tipo key typed en el textField o textArea.
   */
    public void comprobarDimensionTexto(String textoAComprobar, int cantidadCaracteresMaxima, java.awt.event.KeyEvent evt) {
        if (textoAComprobar.length() == cantidadCaracteresMaxima) {
            evt.consume();
        }
    }

    /**
     * Método que gestiona el color de los componentes del formulario de
     * registro de reservas.
     */
    public static void establecerColor() {
        ColorInterfaz.dimeColores();
        Color colorFondo = ColorInterfaz.dimeColores()[0];
        Color colorBotones = ColorInterfaz.dimeColores()[1];
        Color colorTexto = ColorInterfaz.dimeColores()[2];

        //Paneles de fondo
        panelFondo.setBackground(colorFondo);
        textAreaObservaciones.setBackground(colorFondo);
        textAreaDisponibilidad.setBackground(colorFondo);

        //Botones
        btnRegistrar.setBackground(colorBotones);
        btnLimpiar.setBackground(colorBotones);
        btnDisponibilidad.setBackground(colorBotones);

        //Textos
        labelTitulo.setForeground(colorTexto);
        lblActividad.setForeground(colorTexto);
        lblCantidad.setForeground(colorTexto);
        lblCargo.setForeground(colorTexto);
        lblContacto.setForeground(colorTexto);
        lblEntidad.setForeground(colorTexto);
        lblMail.setForeground(colorTexto);
        lblTlf.setForeground(colorTexto);
        btnRegistrar.setForeground(colorTexto);;
        btnLimpiar.setForeground(colorTexto);
        btnDisponibilidad.setForeground(colorTexto);
        textAreaObservaciones.setForeground(colorTexto);
        textAreaDisponibilidad.setForeground(colorTexto);
    }
}
