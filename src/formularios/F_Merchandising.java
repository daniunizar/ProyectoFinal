/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package formularios;

import Programa.F_Base;
import objetosSimples.Merchandising;
import auxiliares.ConexionBaseDatos;
import auxiliares.Fecha;
import configuracion.ColorInterfaz;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * Esta clase gestiona la venta de productos promocionales del museo y su
 * inserción en la Base de Datos.
 *
 * @author Daniel Marcos Muñoz
 */
public class F_Merchandising extends javax.swing.JFrame {

    ArrayList<String> listaMerchan;
    ArrayList<Merchandising> miPedido = new ArrayList<>();

    /**
     * Creates new form F_Merchandising
     */
    public F_Merchandising() {
        initComponents();
        establecerColor();
        setTitle("Centro de Investigación El Fuerte");
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelFondo = new javax.swing.JPanel();
        labelTitulo = new javax.swing.JLabel();
        lblProducto = new javax.swing.JLabel();
        lblCantidad = new javax.swing.JLabel();
        Cmb_VM_Merchan = new javax.swing.JComboBox<>();
        spn_VM_Cantidad = new javax.swing.JSpinner();
        btnAnadir = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_Merchandising = new javax.swing.JTable();
        btnRegistrar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        labelTitulo.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        labelTitulo.setText("Venta de Merchandising");

        lblProducto.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblProducto.setText("Producto");

        lblCantidad.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblCantidad.setText("Cantidad");

        Cmb_VM_Merchan.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Cmb_VM_Merchan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        spn_VM_Cantidad.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        spn_VM_Cantidad.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));

        btnAnadir.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnAnadir.setText("Añadir");
        btnAnadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnadirActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        tabla_Merchandising.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Concepto", "Cantidad", "Precio/Unidad", "Precio Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_Merchandising.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabla_Merchandising);

        btnRegistrar.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnLimpiar.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelFondoLayout = new javax.swing.GroupLayout(panelFondo);
        panelFondo.setLayout(panelFondoLayout);
        panelFondoLayout.setHorizontalGroup(
            panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelFondoLayout.createSequentialGroup()
                        .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Cmb_VM_Merchan, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelFondoLayout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(lblProducto)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                        .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelFondoLayout.createSequentialGroup()
                                .addComponent(spn_VM_Cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                                .addComponent(btnAnadir, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblCantidad))
                        .addGap(18, 18, 18)
                        .addComponent(btnEliminar))
                    .addComponent(jScrollPane1)
                    .addGroup(panelFondoLayout.createSequentialGroup()
                        .addComponent(btnRegistrar)
                        .addGap(18, 18, 18)
                        .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(449, 449, 449))
                    .addGroup(panelFondoLayout.createSequentialGroup()
                        .addComponent(labelTitulo)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelFondoLayout.setVerticalGroup(
            panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProducto)
                    .addComponent(lblCantidad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Cmb_VM_Merchan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spn_VM_Cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnEliminar)
                        .addComponent(btnAnadir)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRegistrar)
                    .addComponent(btnLimpiar))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelFondo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        limpiarFormularioMerchan();
        miPedido = new ArrayList<>();
        mostrarDatos();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnAnadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnadirActionPerformed
        // TODO add your handling code here:
        if (Cmb_VM_Merchan.getSelectedIndex() != 0) {
            if ((int) spn_VM_Cantidad.getValue() > 0) {
                if (comprobarExistencia()) {
                    String datoComprobar = (String) Cmb_VM_Merchan.getSelectedItem();
                    for (Merchandising element : miPedido) {
                        if (element.getConcepto().equalsIgnoreCase(datoComprobar)) {
                            element.setCantidad(element.getCantidad() + (int) spn_VM_Cantidad.getValue());
                        }
                    }
                } else {
                    Float precio = consultarPrecio();
                    Merchandising merchan = new Merchandising((String) Cmb_VM_Merchan.getSelectedItem(), (int) spn_VM_Cantidad.getValue(), precio);
                    miPedido.add(merchan);
                }
                mostrarDatos();
                limpiarFormularioMerchan();
            } else {
                JOptionPane.showMessageDialog(rootPane, "La cantidad de productos a añadir no puede ser inferior o igual a cero", "Error", 2);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Debes seleccionar un tipo de producto a añadir", "Error", 2);
        }

    }//GEN-LAST:event_btnAnadirActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        eliminarConceptoPedido();
        mostrarDatos();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        int REF_PEDIDO = asignarRefPedido_Registro_Merchandising();
        String FECHA = Fecha.dimeFecha();
        for (Merchandising element : miPedido) {
            int NUM_REF = asignarID_Registro_Merchandising();
            int CANTIDAD = element.getCantidad();
            String CONCEPTO = element.getConcepto();
            float PRECIO = element.getPrecio() * CANTIDAD;
            try {
                registrarPedido(NUM_REF, REF_PEDIDO, FECHA, CONCEPTO, CANTIDAD, PRECIO);
            } catch (SQLException ex) {
                Logger.getLogger(F_Merchandising.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("Error al insertar un pedido de merchandising en la base de datos");
            }
        }
        System.out.println("Inserción en base de datos realizada");
        limpiarFormularioMerchan();
        miPedido = new ArrayList<>();
        JOptionPane.showMessageDialog(rootPane, "Registro realizado con éxito", "Información", 1);
        mostrarDatos();
    }//GEN-LAST:event_btnRegistrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(F_Merchandising.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(F_Merchandising.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(F_Merchandising.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(F_Merchandising.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new F_Merchandising().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Cmb_VM_Merchan;
    private static javax.swing.JButton btnAnadir;
    private static javax.swing.JButton btnEliminar;
    private static javax.swing.JButton btnLimpiar;
    private static javax.swing.JButton btnRegistrar;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JLabel labelTitulo;
    private static javax.swing.JLabel lblCantidad;
    private static javax.swing.JLabel lblProducto;
    private static javax.swing.JPanel panelFondo;
    private javax.swing.JSpinner spn_VM_Cantidad;
    private javax.swing.JTable tabla_Merchandising;
    // End of variables declaration//GEN-END:variables

    /**
     * Método que limpia el formulario de venta de productos promocionales
     * reseteando sus componentes.
     */
    public void limpiarFormularioMerchan() {
        Cmb_VM_Merchan.setSelectedIndex(0);
        spn_VM_Cantidad.setValue(0);
    }

    /**
     * Método que rellena el ComboBox de productos promocionales con los ítems
     * existentes en la Base de Datos
     */
    public void cargarComboBox() {
        try {
            //reseteamos la lista de procedencias y los ítems del combo box
            listaMerchan = new ArrayList<>();
            Cmb_VM_Merchan.removeAllItems();

            ConexionBaseDatos.ConexionBaseDatos();
            Connection conexion = ConexionBaseDatos.getConnection();
            Statement sentencia = conexion.createStatement();
            String sql;
            sql = "SELECT * FROM MERCHANDISING";
            ResultSet resul = sentencia.executeQuery(sql);
            //Recorremos el resulSet introducinedo todo en nuestro Array del comboBox
            while (resul.next()) {
                listaMerchan.add(resul.getString(1));
            }
            resul.close();
            sentencia.close();
            //conexion.close(); lo cerramos a continuación desde la clase
            ConexionBaseDatos.desconexionBaseDatos();

        } catch (SQLException ex) {
            System.out.println("Error al conectar a la base de datos desde el método cargarComboBoxMerchan");
            Logger.getLogger(F_Base.class.getName()).log(Level.SEVERE, null, ex);
        }

        Cmb_VM_Merchan.removeAllItems();
        Cmb_VM_Merchan.addItem("-- Escoge un ítem");
        for (String element : listaMerchan) {
            System.out.println("tipos entradas cargados: " + element);
            Cmb_VM_Merchan.addItem(element);
        }
    }

    /**
     * Método que consulta el precio de un producto añadido al pedido, para
     * sumarlo al precio total de venta.
     *
     * @return Devuelve el precio por unidad del producto seleccionado.
     */
    public float consultarPrecio() {
        float precio = 0;

        ConexionBaseDatos.ConexionBaseDatos();
        Connection conexion = ConexionBaseDatos.getConnection();
        Statement sentencia;
        try {
            sentencia = conexion.createStatement();

            String sql;
            sql = "SELECT * FROM MERCHANDISING WHERE CONCEPTO = '" + (String) Cmb_VM_Merchan.getSelectedItem() + "'";
            ResultSet resul = sentencia.executeQuery(sql);
            //Recorremos el resulSet introducinedo todo en nuestro Array del comboBox
            while (resul.next()) {
                precio = resul.getFloat(2);
            }
            resul.close();
            sentencia.close();
            //conexion.close(); lo cerramos a continuación desde la clase
            ConexionBaseDatos.desconexionBaseDatos();
        } catch (SQLException ex) {
            Logger.getLogger(F_Merchandising.class.getName()).log(Level.SEVERE, null, ex);
        }
        return precio;
    }

    /**
     * Método que rellena la tabla con el pedido actual de productos
     * promocionales.
     */
    public void mostrarDatos() {
        String matrizDatos[][] = new String[miPedido.size() + 1][4];
        float precioTotal = 0;
        for (int i = 0; i < miPedido.size(); i++) {
            matrizDatos[i][0] = miPedido.get(i).getConcepto();
            matrizDatos[i][1] = Integer.toString(miPedido.get(i).getCantidad());
            matrizDatos[i][2] = Float.toString(miPedido.get(i).getPrecio()) + "€";
            precioTotal += (miPedido.get(i).getCantidad() * miPedido.get(i).getPrecio());
            matrizDatos[i][3] = Float.toString(miPedido.get(i).getCantidad() * miPedido.get(i).getPrecio()) + "€";
        }
        matrizDatos[miPedido.size()][0] = "TOTAL";
        matrizDatos[miPedido.size()][3] = Float.toString(precioTotal) + "€";

        tabla_Merchandising.setModel(new javax.swing.table.DefaultTableModel(
                matrizDatos,
                new String[]{
                    "Concepto", "Cantidad", "Precio/Unidad", "Precio Total"
                }
        ));
    }

    /**
     * Método que permite retirar un producto añadido al pedido.
     */
    public void eliminarConceptoPedido() {
        //COMPROBAR CUÁNTOS PRODUCTOS HAY SELECCIONADOS
        int cantidadFilasSeleccionadas = tabla_Merchandising.getSelectedRowCount();
        if (cantidadFilasSeleccionadas == 1) {
            String datoEliminar = (String) tabla_Merchandising.getValueAt(tabla_Merchandising.getSelectedRow(), 0);
            Iterator<Merchandising> it = miPedido.iterator();
            while (it.hasNext()) {
                String nombreComprobar = it.next().getConcepto();
                if (nombreComprobar.equalsIgnoreCase(datoEliminar)) {
                    it.remove();
                }
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Debe seleccionar UNA ÚNICA fila para proceder a su eliminación del pedido", "Error", 2);
        }

    }

    /**
     * Método que comprueba, antes de añadir cualquier producto al pedido, que
     * no exista con anterioridad. Si existe, en vez de añadir un producto
     * nuevo, lo suma al ya existente.
     *
     * @return Devuelve un booleano que informa de la existencia previa o no del tipo de producto en el pedido.
     */
    public boolean comprobarExistencia() {
        boolean existe = false;
        String datoComprobar = (String) Cmb_VM_Merchan.getSelectedItem();
        for (Merchandising element : miPedido) {
            if (element.getConcepto().equalsIgnoreCase(datoComprobar)) {
                existe = true;
            }
        }
        return existe;
    }

    /**
     * Método que obtiene de la Base de Datos la clave primaria del nuevo
     * registro de pedido.
     *
     * @return Devuelve un entero con la clave primaria del nuevo registro.
     */
    public int asignarID_Registro_Merchandising() {
        Connection conexion;
        int numeroRef = 0;
        try {
            //Conexion = DriverManager.getConnection(urlV, usuario, clave);
            ConexionBaseDatos.ConexionBaseDatos();
            conexion = ConexionBaseDatos.getConnection();
            Statement sentencia = conexion.createStatement();
            String sql;
            sql = "SELECT MAX (NUM_REF) FROM REGISTRO_MERCHANDISING";

            ResultSet resul = sentencia.executeQuery(sql);
            if (resul.next()) { //Sólo tiene que devolver un único resultado
                System.out.println("En el registro de merchandising hay al menos algún registro para calcular el NUM_REF");
                numeroRef = resul.getInt(1);
            } else {
                System.out.println("En el registro de merchandising NO hay ningún registro para calcular el NUM_REF");
                numeroRef = 0;
            }

            resul.close();
            sentencia.close();
            //conexion.close();
            ConexionBaseDatos.desconexionBaseDatos();
        } catch (SQLException ex) {
            Logger.getLogger(F_Base.class.getName()).log(Level.SEVERE, null, ex);
        }
        return numeroRef + 1;//al máximo número encontrado en la tabla le sumamos 1. Creamos así un campo autoincremental
    }

    /**
     * Método que obtiene de la Base de Datos el número de referencia del pedido
     * actual.
     *
     * @return Devuelve el número de referencia del pedido actual.
     */
    public int asignarRefPedido_Registro_Merchandising() {
        Connection conexion;
        int refPedido = 0;
        try {
            //conexion = DriverManager.getConnection(urlV, usuario, clave);
            ConexionBaseDatos.ConexionBaseDatos();
            conexion = ConexionBaseDatos.getConnection();
            Statement sentencia = conexion.createStatement();
            String sql;
            sql = "SELECT MAX (REF_PEDIDO) FROM REGISTRO_MERCHANDISING";

            ResultSet resul = sentencia.executeQuery(sql);
            if (resul.next()) { //Sólo tiene que devolver un único resultado
                System.out.println("En el registro de visitantes hay al menos algún registro para calcular el Ref_Visita");
                refPedido = resul.getInt(1);
            } else {
                System.out.println("En el registro de visitantes NO hay ningún registro para calcular el Ref_Visita");
                refPedido = 0;
            }

            resul.close();
            sentencia.close();
            //conexion.close();
            ConexionBaseDatos.desconexionBaseDatos();
        } catch (SQLException ex) {
            Logger.getLogger(F_Base.class.getName()).log(Level.SEVERE, null, ex);
        }
        return refPedido + 1;//al máximo número encontrado en la tabla le sumamos 1. Creamos así un campo autoincremental
    }

    /**
     * Método que resetea el pedido actual, dejándolo vacío.
     */
    public void restablecerPedido() {
        miPedido = new ArrayList<>();
    }

    /**
     * Método encargado del ingreso en la Base de Datos de una nueva venta de
     * productos promocionales. Para cada tipo de producto vendido se genera un
     * registro con NUM_REF propio y REF_PEDIDO compartido.
     *
     * @param NUM_REF Campo autogerenado previa consulta a la Base de Datos
     * mediante el método asignarID_Registro_Merchandising().
     * @param REF_PEDIDO Campo autogenerado previa consulta a la Base de Datos
     * mediante el método asignarRefPedido_Registro_Merchandising().
     * @param FECHA Campo autogenerado a partir de la fecha del sistema. Es la
     * fecha del ingreso y debería coincidir con la fecha de la venta.
     * @param CONCEPTO Es el tipo de producto vendido.
     * @param CANTIDAD Es la cantidad de productos vendida del tipo
     * correspondiente.
     * @param PRECIO_TOTAL Es el precio total, resultado de multiplicar el
     * precio unitario de cada producto por la cantidad de productos de ese tipo
     * vendidos.
     * @throws SQLException Puede lanzar excepciones de conectividad con la Base de Datos.
     */
    public void registrarPedido(int NUM_REF, int REF_PEDIDO, String FECHA, String CONCEPTO, int CANTIDAD, Float PRECIO_TOTAL) throws SQLException {

//Conexión a la base de datos
        //Connection conexion = DriverManager.getConnection(urlV, usuario, clave);
        ConexionBaseDatos.ConexionBaseDatos();
        Connection conexion = ConexionBaseDatos.getConnection();
        //Insertar los datos
        String datosInsercion = "INSERT INTO REGISTRO_MERCHANDISING VALUES (?, ?, ?, ?, ?, ?)";
        PreparedStatement sentencia = conexion.prepareStatement(datosInsercion);
        sentencia.setInt(1, NUM_REF);
        sentencia.setInt(2, REF_PEDIDO);
        sentencia.setString(3, FECHA);
        sentencia.setString(4, CONCEPTO);
        sentencia.setInt(5, CANTIDAD);
        sentencia.setFloat(6, PRECIO_TOTAL);
        sentencia.executeUpdate();
        //Cerrar la conexión
        sentencia.close();
        ConexionBaseDatos.desconexionBaseDatos();
    }

    /**
     * Método que gestiona el color de los componentes del formulario de venta de productos promocionales en función de las preferencias del usuario.
     */
    public static void establecerColor() {
        ColorInterfaz.dimeColores();
        Color colorFondo = ColorInterfaz.dimeColores()[0];
        Color colorBotones = ColorInterfaz.dimeColores()[1];
        Color colorTexto = ColorInterfaz.dimeColores()[2];

        //Paneles de fondo
        panelFondo.setBackground(colorFondo);

        //Botones
        btnRegistrar.setBackground(colorBotones);
        btnLimpiar.setBackground(colorBotones);
        btnAnadir.setBackground(colorBotones);
        btnEliminar.setBackground(colorBotones);

        //Textos
        labelTitulo.setForeground(colorTexto);
        lblProducto.setForeground(colorTexto);
        lblCantidad.setForeground(colorTexto);

        btnRegistrar.setForeground(colorTexto);
        btnLimpiar.setForeground(colorTexto);
        btnAnadir.setForeground(colorTexto);
        btnEliminar.setForeground(colorTexto);
    }
}
