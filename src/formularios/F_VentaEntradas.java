/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package formularios;

import Programa.F_Base;
import historicos.F_Historico_Visitantes;
import auxiliares.ConexionBaseDatos;
import auxiliares.Fecha;
import configuracion.ColorInterfaz;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * Esta clase permite ingresar nuevas ventas de entradas en la Base de Datos.
 *
 * @author Daniel Marcos Muñoz
 */
public class F_VentaEntradas extends javax.swing.JFrame {

    ArrayList<String> listaEntradas;
    int cantidadEntradas, cantidadGratis;
    float precionEntrada;
    float precioUnidad;
    float precioTotal;

    /**
     * Creates new form F_VentaEntradas
     */
    public F_VentaEntradas() {
        initComponents();
        establecerColor();
        setTitle("Centro de Investigación El Fuerte");
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelFondo = new javax.swing.JPanel();
        labelTitulo = new javax.swing.JLabel();
        lblTipoEntrada = new javax.swing.JLabel();
        Cmb_VE_Entradas = new javax.swing.JComboBox<>();
        lblCantidad = new javax.swing.JLabel();
        spn_VE_Cantidad = new javax.swing.JSpinner();
        lblGratuitas = new javax.swing.JLabel();
        spn_VE_Gratis = new javax.swing.JSpinner();
        lblPrecioUnidad = new javax.swing.JLabel();
        lblPrecioTotal = new javax.swing.JLabel();
        label_precioUnidad = new javax.swing.JLabel();
        label_precioTotal = new javax.swing.JLabel();
        btnRegistrar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        labelTitulo.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        labelTitulo.setText("Venta de Entradas");

        lblTipoEntrada.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblTipoEntrada.setText("Tipo de entrada");

        Cmb_VE_Entradas.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Cmb_VE_Entradas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Escoge un tipo de entrada" }));
        Cmb_VE_Entradas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cmb_VE_EntradasActionPerformed(evt);
            }
        });

        lblCantidad.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblCantidad.setText("Cantidad");

        spn_VE_Cantidad.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        spn_VE_Cantidad.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));
        spn_VE_Cantidad.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spn_VE_CantidadStateChanged(evt);
            }
        });
        spn_VE_Cantidad.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                spn_VE_CantidadFocusLost(evt);
            }
        });

        lblGratuitas.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblGratuitas.setText("Gratuitas");

        spn_VE_Gratis.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        spn_VE_Gratis.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));
        spn_VE_Gratis.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spn_VE_GratisStateChanged(evt);
            }
        });
        spn_VE_Gratis.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                spn_VE_GratisFocusLost(evt);
            }
        });

        lblPrecioUnidad.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblPrecioUnidad.setText("Precio Unidad:");

        lblPrecioTotal.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblPrecioTotal.setText("Precio Total:");

        label_precioUnidad.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        label_precioTotal.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        btnRegistrar.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnLimpiar.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelFondoLayout = new javax.swing.GroupLayout(panelFondo);
        panelFondo.setLayout(panelFondoLayout);
        panelFondoLayout.setHorizontalGroup(
            panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelFondoLayout.createSequentialGroup()
                        .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTipoEntrada)
                            .addComponent(Cmb_VE_Entradas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblCantidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spn_VE_Cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(63, 63, 63)
                        .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblGratuitas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spn_VE_Gratis, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelFondoLayout.createSequentialGroup()
                        .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelTitulo)
                            .addGroup(panelFondoLayout.createSequentialGroup()
                                .addComponent(btnRegistrar)
                                .addGap(18, 18, 18)
                                .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(panelFondoLayout.createSequentialGroup()
                                    .addComponent(lblPrecioUnidad)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(label_precioUnidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelFondoLayout.createSequentialGroup()
                                    .addComponent(lblPrecioTotal)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(label_precioTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(246, 246, 246)))
                .addGap(58, 58, 58))
        );
        panelFondoLayout.setVerticalGroup(
            panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTipoEntrada)
                    .addComponent(lblCantidad)
                    .addComponent(lblGratuitas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Cmb_VE_Entradas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(spn_VE_Cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(spn_VE_Gratis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrecioUnidad)
                    .addComponent(label_precioUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblPrecioTotal)
                    .addComponent(label_precioTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRegistrar)
                    .addComponent(btnLimpiar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        limpiarFormularioVentaEntradas();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        // TODO add your handling code here:
        cantidadEntradas = (int) spn_VE_Cantidad.getValue();
        cantidadGratis = (int) spn_VE_Gratis.getValue();
        if (Cmb_VE_Entradas.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Debe seleccionar un tipo de entrada", "Error", 2);
        } else if (cantidadEntradas < 1) {
            JOptionPane.showMessageDialog(rootPane, "La cantidad de entradas debe ser superior a 0", "Error", 2);
        } else if (cantidadGratis > cantidadEntradas) {
            JOptionPane.showMessageDialog(rootPane, "La cantidad de entradas gratuitas no puede superar a la de entradas totales", "Error", 2);
        } else {
            precioUnidad = consultarPrecioUnidad();
            precioTotal = calcularPrecioTotal();
            int NUM_REF = asignarNumRegistro_RegistroEntradas();
            String fecha = Fecha.dimeFecha();
            String tipoEntrada = (String) Cmb_VE_Entradas.getSelectedItem();

            try {
                insertarVentaEntradas(NUM_REF, fecha, tipoEntrada, cantidadEntradas, cantidadGratis, precioTotal);
                JOptionPane.showMessageDialog(rootPane, "Registro realizado con éxito", "Información", 1);

            } catch (SQLException ex) {
                Logger.getLogger(F_VentaEntradas.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("Error al tratar de insertar un registro de venta de entradas en la base de datos");
                JOptionPane.showMessageDialog(rootPane, "No se ha podido registrar", "Error", 2);
            }
        }
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void spn_VE_CantidadFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_spn_VE_CantidadFocusLost
        // TODO add your handling code here:
        cantidadEntradas = (int) spn_VE_Cantidad.getValue();
        label_precioTotal.setText(calcularPrecioTotal() + "€");
    }//GEN-LAST:event_spn_VE_CantidadFocusLost

    private void Cmb_VE_EntradasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cmb_VE_EntradasActionPerformed
        // TODO add your handling code here:
        label_precioUnidad.setText(consultarPrecioUnidad() + "€");
        label_precioTotal.setText(calcularPrecioTotal() + "€");
    }//GEN-LAST:event_Cmb_VE_EntradasActionPerformed

    private void spn_VE_GratisStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spn_VE_GratisStateChanged
        // TODO add your handling code here:
        cantidadGratis = (int) spn_VE_Gratis.getValue();
        label_precioTotal.setText(calcularPrecioTotal() + "€");
    }//GEN-LAST:event_spn_VE_GratisStateChanged

    private void spn_VE_GratisFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_spn_VE_GratisFocusLost
        // TODO add your handling code here:
        cantidadGratis = (int) spn_VE_Gratis.getValue();
        label_precioTotal.setText(calcularPrecioTotal() + "€");

    }//GEN-LAST:event_spn_VE_GratisFocusLost

    private void spn_VE_CantidadStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spn_VE_CantidadStateChanged
        cantidadEntradas = (int) spn_VE_Cantidad.getValue();
        label_precioTotal.setText(calcularPrecioTotal() + "€");
    }//GEN-LAST:event_spn_VE_CantidadStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(F_VentaEntradas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(F_VentaEntradas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(F_VentaEntradas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(F_VentaEntradas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new F_VentaEntradas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JComboBox<String> Cmb_VE_Entradas;
    private static javax.swing.JButton btnLimpiar;
    private static javax.swing.JButton btnRegistrar;
    private static javax.swing.JLabel labelTitulo;
    private static javax.swing.JLabel label_precioTotal;
    private static javax.swing.JLabel label_precioUnidad;
    private static javax.swing.JLabel lblCantidad;
    private static javax.swing.JLabel lblGratuitas;
    private static javax.swing.JLabel lblPrecioTotal;
    private static javax.swing.JLabel lblPrecioUnidad;
    private static javax.swing.JLabel lblTipoEntrada;
    private static javax.swing.JPanel panelFondo;
    private static javax.swing.JSpinner spn_VE_Cantidad;
    private static javax.swing.JSpinner spn_VE_Gratis;
    // End of variables declaration//GEN-END:variables

    /**
     * Este método rellena el ComboBox del formulario de venta de entradas con
     * los tipos de entradas existentes.
     */
    public void cargarComboBoxEntradas() {
        try {
            System.out.println("Tratamos cargar combo tipos entradas");
            //reseteamos la lista de procedencias y los ítems del combo box
            listaEntradas = new ArrayList<>();
            Cmb_VE_Entradas.removeAllItems();

            ConexionBaseDatos.ConexionBaseDatos();
            Connection conexion = ConexionBaseDatos.getConnection();
            Statement sentencia = conexion.createStatement();
            String sql;
            sql = "SELECT * FROM ENTRADA";
            ResultSet resul = sentencia.executeQuery(sql);
            //Recorremos el resulSet introducinedo todo en nuestro Array del comboBox
            while (resul.next()) {
                listaEntradas.add(resul.getString(1));
            }
            resul.close();
            sentencia.close();
            //conexion.close(); lo cerramos a continuación desde la clase
            ConexionBaseDatos.desconexionBaseDatos();

        } catch (SQLException ex) {
            System.out.println("Error al conectar a la base de datos desde el método cargarComboBoxEntradas");
            Logger.getLogger(F_Base.class.getName()).log(Level.SEVERE, null, ex);
        }

        Cmb_VE_Entradas.removeAllItems();
        Cmb_VE_Entradas.addItem("-- Escoge un tipo de entrada");
        for (String element : listaEntradas) {
            System.out.println("tipos entradas cargados: " + element);
            Cmb_VE_Entradas.addItem(element);
        }
    }

    /**
     * Este método limpia el forulario de venta de entradas reseteando sus
     * componentes.
     */
    public void limpiarFormularioVentaEntradas() {
        Cmb_VE_Entradas.setSelectedIndex(0);
        spn_VE_Cantidad.setValue(0);
        spn_VE_Gratis.setValue(0);
    }

    /**
     * Este método asigna el número de registro que será la clave primaria del
     * nuevo registro de venta de entradas.
     *
     * @return Devuelve un entero cn la clave primaria del nuevo registro.
     */
    public int asignarNumRegistro_RegistroEntradas() {
        Connection conexion;
        int NUM_REF = 0;
        try {
            //conexion = DriverManager.getConnection(urlV, usuario, clave);
            ConexionBaseDatos.ConexionBaseDatos();
            conexion = ConexionBaseDatos.getConnection();
            Statement sentencia = conexion.createStatement();
            String sql;
            sql = "SELECT MAX (NUM_REF) FROM REGISTRO_ENTRADAS";

            ResultSet resul = sentencia.executeQuery(sql);
            if (resul.next()) { //Sólo tiene que devolver un único resultado
                System.out.println("En el registro de entradas hay al menos algún registro para calcular el NUM_REF");
                System.out.println(NUM_REF);
                NUM_REF = resul.getInt(1);
            } else {
                System.out.println("En el registro de entradas NO hay ningún registro para calcular el NUM_REF");
                System.out.println(NUM_REF);

                NUM_REF = 0;
            }

            resul.close();
            sentencia.close();
            //conexion.close();
            ConexionBaseDatos.desconexionBaseDatos();
        } catch (SQLException ex) {
            Logger.getLogger(F_Base.class.getName()).log(Level.SEVERE, null, ex);
        }
        return NUM_REF + 1;//al máximo número encontrado en la tabla le sumamos 1. Creamos así un campo autoincremental
    }

    /**
     * Este método consulta el precio unitario del tipo de entrada seleccionada
     * para informar del coste de la misma y del precio total.
     *
     * @return Devuelve un float con el precio unitario del tipo de entrada
     * seleccionada
     */
    public float consultarPrecioUnidad() {
        float precioEntrada = 0.0F;

        if (Cmb_VE_Entradas.getSelectedIndex() != 0) {
            ConexionBaseDatos.ConexionBaseDatos();
            Connection conexion = ConexionBaseDatos.getConnection();
            Statement sentencia;
            try {
                sentencia = conexion.createStatement();
                String sql;
                String tipoEntrada = (String) Cmb_VE_Entradas.getSelectedItem();
                sql = "SELECT * FROM ENTRADA WHERE CONCEPTO = '" + tipoEntrada + "'";
                ResultSet resul = sentencia.executeQuery(sql);
                while (resul.next()) {
                    precioEntrada = resul.getFloat(2);
                    System.out.println("El precio de la entrada es " + precioEntrada);
                }
            } catch (SQLException ex) {
                Logger.getLogger(F_Historico_Visitantes.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("Error al tratar de conectar con la base de datos desde consultarPrecioIndividual de entradas");
            }

            ConexionBaseDatos.desconexionBaseDatos();
        }

        return precioEntrada;
    }

    /**
     * Este método calcula el precio total de una venta de entradas a partir del
     * coste unitario, de la cantidad de entradas vendidas y de exenciones
     * existentes.
     *
     * @return Devuelve un float con el precio total de la venta de entradas.
     */
    public float calcularPrecioTotal() {
        precioUnidad = consultarPrecioUnidad();
        precioTotal = (cantidadEntradas - cantidadGratis) * precioUnidad;
        if (precioTotal < 0) {
            precioTotal = 0;
        }
        return precioTotal;
    }

    /**
     * Este método ingresa en la Base de Datos una nueva venta de entradas.
     *
     * @param NUM_REF Es la clave primaria y se autogenera mediante el método
     * asignarNumRegistro_RegistroEntradas().
     * @param fecha Es la fecha de la inserción y debería corresponderse con la
     * de la venta. Se extrae de la fechad el sistema.
     * @param tipoEntrada Es el tipo de entrada vendidad. Su valor se extrae del
     * formulario.
     * @param cantidadEntradas Es la cantidad de entradas vendidas. Su valor se
     * extrae del formlario.
     * @param cantidadGratis Es la cantidad de entradas gratuitas o exentas de
     * pago. Su valor se extrae del formulario.
     * @param precioTotal Es el precio total de la venta. Su valor se extrae del
     * formulario, autocalculado por el método calcularPrecioTotal().
     * @throws SQLException Puede lanzar excepciones de conectividad con la Base de Datos.
     */
    public void insertarVentaEntradas(int NUM_REF, String fecha, String tipoEntrada, int cantidadEntradas, int cantidadGratis, float precioTotal) throws SQLException {
        ConexionBaseDatos.ConexionBaseDatos();
        Connection conexion = ConexionBaseDatos.getConnection();
        //Insertar los datos
        String datosInsercion = "INSERT INTO REGISTRO_ENTRADAS VALUES (?, ?, ?, ?, ?, ?)";
        PreparedStatement sentencia = conexion.prepareStatement(datosInsercion);
        sentencia.setInt(1, NUM_REF);
        sentencia.setString(2, fecha);
        sentencia.setString(3, tipoEntrada);
        sentencia.setInt(4, cantidadEntradas);
        sentencia.setInt(5, cantidadGratis);
        sentencia.setFloat(6, precioTotal);
        System.out.println("ANTES");
        sentencia.executeUpdate();
        System.out.println("DESPUES");
        //Cerrar la conexión
        sentencia.close();
        ConexionBaseDatos.desconexionBaseDatos();
        limpiarFormularioVentaEntradas();

        System.out.println("Inserción en base de datos realizada");
    }

    /**
     * Este método gestiona el color de los componentes del formulario de venta
     * de entradas en función de las preferencias del usuario.
     */
    public static void establecerColor() {
        ColorInterfaz.dimeColores();
        Color colorFondo = ColorInterfaz.dimeColores()[0];
        Color colorBotones = ColorInterfaz.dimeColores()[1];
        Color colorTexto = ColorInterfaz.dimeColores()[2];

        //Paneles de fondo
        panelFondo.setBackground(colorFondo);

        //Botones
        btnRegistrar.setBackground(colorBotones);
        btnLimpiar.setBackground(colorBotones);

        //Textos
        labelTitulo.setForeground(colorTexto);
        label_precioTotal.setForeground(colorTexto);
        label_precioUnidad.setForeground(colorTexto);
        lblCantidad.setForeground(colorTexto);
        lblGratuitas.setForeground(colorTexto);
        lblPrecioUnidad.setForeground(colorTexto);
        lblPrecioTotal.setForeground(colorTexto);
        lblTipoEntrada.setForeground(colorTexto);
        btnRegistrar.setForeground(colorTexto);
        btnLimpiar.setForeground(colorTexto);

    }
}
